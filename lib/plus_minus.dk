def plus_minus :
  sttfa.eps (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le m n) (eq.eq nat.nat (plus.plus (minus.minus n m) p) (minus.minus (plus.plus n p) m))))))
  :=
  nat_elim2.nat_elim2 (__:(sttfa.etap (sttfa.p nat.nat)) => _0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le __ _0) (eq.eq nat.nat (plus.plus (minus.minus _0 __) p) (minus.minus (plus.plus _0 p) __)))) (n:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => auto:(sttfa.eps (le.le O.O n)) => rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus __ p) (minus.minus (plus.plus n p) O.O)) (rewrite_l.rewrite_l nat.nat (plus.plus n p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus n p) __) (refl.refl nat.nat (plus.plus n p)) (minus.minus (plus.plus n p) O.O) (minus_n_O.minus_n_O (plus.plus n p))) (minus.minus n O.O) (minus_n_O.minus_n_O n)) (n:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => abs:(sttfa.eps (le.le (S.S n) O.O)) => falsity.falsity (eq.eq nat.nat (plus.plus (minus.minus O.O (S.S n)) p) (minus.minus (plus.plus O.O p) (S.S n))) (absurd.absurd (le.le (S.S n) O.O) abs (not_le_Sn_O.not_le_Sn_O n))) (n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_minus.sym_eq_minus (S.S m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus.minus (plus.plus m p) n)))) (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (y (S.S n)) p) (minus.minus (plus.plus (S.S m) p) (S.S n)))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus.minus (plus.plus m p) n)))) (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (y (S.S n)) p) (minus.minus (plus.plus (S.S m) p) (S.S n)))))) (sym_eq_minus_body_S.sym_eq_minus_body_S m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus.minus (plus.plus m p) n)))) (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (y (S.S n)) p) (minus.minus (plus.plus (S.S m) p) (S.S n)))))) (auto:(sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus.minus (plus.plus m p) n))))) => p:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat (S.S m) (q:(sttfa.etap (sttfa.p nat.nat)) => minus.minus m q) n (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus y p) (minus.minus (plus.plus (S.S m) p) (S.S n)))) (sym_eq_minus.sym_eq_minus (plus.plus (S.S m) p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (y (S.S n)))) (sym_eq_plus.sym_eq_plus (S.S m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (filter_nat_type.filter_nat_type (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y p) (S.S n)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) plus_body.plus_body m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (filter_nat_type.filter_nat_type (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y p) (S.S n)))) (sym_eq_plus_body_S.sym_eq_plus_body_S m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (filter_nat_type.filter_nat_type (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y p) (S.S n)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (plus.plus m p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (y (S.S n)))) (eq_plus_body_S.eq_plus_body_S m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (eq_filter_nat_type_S.eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) plus_body.plus_body m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (eq_plus.eq_plus (S.S m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (sym_eq_plus.sym_eq_plus (S.S m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) plus_body.plus_body m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (sym_eq_plus_body_S.sym_eq_plus_body_S m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (minus_body.minus_body (y p) (S.S n)))) (sym_eq_minus_body_S.sym_eq_minus_body_S (plus.plus m p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) (y (S.S n)))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat (S.S (plus.plus m p)) (q:(sttfa.etap (sttfa.p nat.nat)) => minus.minus (plus.plus m p) q) n (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S n) (S.S m)) (eq.eq nat.nat (plus.plus (minus.minus m n) p) y)) (auto':(sttfa.eps (le.le (S.S n) (S.S m))) => auto p (eq_coerc.eq_coerc (le.le (pred.pred (S.S n)) (pred.pred (S.S m))) (le.le n m) (monotonic_pred.monotonic_pred (S.S n) (S.S m) auto') (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (pred.pred (S.S m))) (le.le n m)) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le n __) (le.le n m)) (refl.refl sttfa.bool (le.le n m)) (pred.pred (S.S m)) (pred_Sn.pred_Sn m)) (pred.pred (S.S n)) (pred_Sn.pred_Sn n))))))))))))))))))))).

