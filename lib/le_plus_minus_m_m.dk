def le_plus_minus_m_m :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le n (plus.plus (minus.minus n m) m))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le _x_365 (plus.plus (minus.minus _x_365 m) m))) (sym_eq_minus.sym_eq_minus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le O.O (plus.plus (y m) m))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le O.O (plus.plus (y m) m))) (sym_eq_minus_body_O.sym_eq_minus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le O.O (plus.plus (y m) m))) (m:(sttfa.etap (sttfa.p nat.nat)) => le_plus_n_r.le_plus_n_r m O.O)))) (a:(sttfa.etap (sttfa.p nat.nat)) => Hind:(sttfa.eps (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => le.le a (plus.plus (minus.minus a m) m)))) => m:(sttfa.etap (sttfa.p nat.nat)) => match_nat_prop.match_nat_prop (__:(sttfa.etap (sttfa.p nat.nat)) => le.le (S.S a) (plus.plus (minus.minus (S.S a) __) __)) (sym_eq_minus.sym_eq_minus (S.S a) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y O.O) O.O)) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body a (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y O.O) O.O)) (sym_eq_minus_body_S.sym_eq_minus_body_S a (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y O.O) O.O)) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O nat.nat (S.S a) (q:(sttfa.etap (sttfa.p nat.nat)) => minus.minus a q) (y:(sttfa.etap (sttfa.p nat.nat)) => le.le (S.S a) (plus.plus y O.O)) (le_plus_n_r.le_plus_n_r O.O (S.S a)))))) (n0:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_minus.sym_eq_minus (S.S a) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y (S.S n0)) (S.S n0))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body a (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y (S.S n0)) (S.S n0))) (sym_eq_minus_body_S.sym_eq_minus_body_S a (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => le.le (S.S a) (plus.plus (y (S.S n0)) (S.S n0))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat (S.S a) (q:(sttfa.etap (sttfa.p nat.nat)) => minus.minus a q) n0 (y:(sttfa.etap (sttfa.p nat.nat)) => le.le (S.S a) (plus.plus y (S.S n0))) (eq_coerc.eq_coerc (le.le (S.S a) (S.S (plus.plus (minus.minus a n0) n0))) (le.le (S.S a) (plus.plus (minus.minus a n0) (S.S n0))) (le_S_S.le_S_S a (plus.plus (minus.minus a n0) n0) (Hind n0)) (rewrite_r.rewrite_r nat.nat (plus.plus (minus.minus a n0) (S.S n0)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S a) __) (le.le (S.S a) (plus.plus (minus.minus a n0) (S.S n0)))) (refl.refl sttfa.bool (le.le (S.S a) (plus.plus (minus.minus a n0) (S.S n0)))) (S.S (plus.plus (minus.minus a n0) n0)) (plus_n_Sm.plus_n_Sm (minus.minus a n0) n0))))))) m) n.

