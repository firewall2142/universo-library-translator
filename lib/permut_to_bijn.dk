def permut_to_bijn :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (permut.permut f n) (bijn.bijn f n))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (permut.permut f _x_365) (bijn.bijn f _x_365))) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => _clearme:(sttfa.eps (And.And (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (le.le (f i) O.O))) (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (sttfa.impl (le.le j O.O) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j)))))))) => match_And_prop.match_And_prop (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (le.le (f i) O.O))) (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (sttfa.impl (le.le j O.O) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j)))))) (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le m O.O) (ex.ex nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p O.O) (eq.eq nat.nat (f p) m))))) (H:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (le.le (f i) O.O)))) => H1:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (sttfa.impl (le.le j O.O) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j))))))) => m:(sttfa.etap (sttfa.p nat.nat)) => lem0:(sttfa.eps (le.le m O.O)) => ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le x O.O) (eq.eq nat.nat (f x) m)) O.O (conj.conj (le.le O.O O.O) (eq.eq nat.nat (f O.O) m) (le_O_n.le_O_n O.O) (le_n_O_elim.le_n_O_elim m lem0 (eq.eq nat.nat (f O.O)) (sym_eq.sym_eq nat.nat O.O (f O.O) (le_n_O_to_eq.le_n_O_to_eq (f O.O) (H O.O (le_O_n.le_O_n O.O))))))) _clearme) (m:(sttfa.etap (sttfa.p nat.nat)) => Hind:(sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (permut.permut f m) (bijn.bijn f m)))) => f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => permf:(sttfa.eps (permut.permut f (S.S m))) => eq_to_bijn.eq_to_bijn (p:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (transpose.transpose (f (S.S m)) (S.S m) (f p))) f (S.S m) (i:(sttfa.etap (sttfa.p nat.nat)) => lei:(sttfa.eps (le.le i (S.S m))) => transpose_transpose.transpose_transpose (f (S.S m)) (S.S m) (f i)) (bijn_fg.bijn_fg (transpose.transpose (f (S.S m)) (S.S m)) (__:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f __)) (S.S m) (match_And_prop.match_And_prop (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S m)) (le.le (f i) (S.S m)))) (injn.injn f (S.S m)) (bijn.bijn (transpose.transpose (f (S.S m)) (S.S m)) (S.S m)) (lef:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S m)) (le.le (f i) (S.S m))))) => __:(sttfa.eps (injn.injn f (S.S m))) => bijn_transpose.bijn_transpose (S.S m) (f (S.S m)) (S.S m) (lef (S.S m) (le_n.le_n (S.S m))) (le_n.le_n (S.S m))) permf) (bijn_n_Sn.bijn_n_Sn (__:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f __)) m (Hind (__:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f __)) (permut_S_to_permut_transpose.permut_S_to_permut_transpose f m permf)) (eq_ind_r.eq_ind_r bool.bool true.true (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f (S.S m)) (eqb.eqb (f (S.S m)) (S.S m))) x) (S.S m)) (eq_match_bool_type_true.eq_match_bool_type_true nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f (S.S m)) (eqb.eqb (f (S.S m)) (S.S m))) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f (S.S m)) (eqb.eqb (f (S.S m)) (S.S m))) true.true) y) (refl.refl nat.nat (match_bool_type.match_bool_type nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f (S.S m)) (eqb.eqb (f (S.S m)) (S.S m))) true.true))) (eqb.eqb (f (S.S m)) (f (S.S m))) (eqb_n_n.eqb_n_n (f (S.S m))))))) n.

