def le_times :
  sttfa.eps (sttfa.forall nat.nat (n1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n2:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m2:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n1 n2) (sttfa.impl (le.le m1 m2) (le.le (times.times n1 m1) (times.times n2 m2))))))))
  :=
  n1:(sttfa.etap (sttfa.p nat.nat)) => n2:(sttfa.etap (sttfa.p nat.nat)) => m1:(sttfa.etap (sttfa.p nat.nat)) => m2:(sttfa.etap (sttfa.p nat.nat)) => len:(sttfa.eps (le.le n1 n2)) => lem:(sttfa.eps (le.le m1 m2)) => transitive_le.transitive_le (times.times n1 m1) (times.times n1 m2) (times.times n2 m2) (monotonic_le_times_r.monotonic_le_times_r n1 m1 m2 lem) (eq_coerc.eq_coerc (le.le (times.times m2 n1) (times.times m2 n2)) (le.le (times.times n1 m2) (times.times n2 m2)) (monotonic_le_times_r.monotonic_le_times_r m2 n1 n2 len) (rewrite_r.rewrite_r nat.nat (times.times n1 m2) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (times.times m2 n2)) (le.le (times.times n1 m2) (times.times n2 m2))) (rewrite_r.rewrite_r nat.nat (times.times n2 m2) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times n1 m2) __) (le.le (times.times n1 m2) (times.times n2 m2))) (refl.refl sttfa.bool (le.le (times.times n1 m2) (times.times n2 m2))) (times.times m2 n2) (commutative_times.commutative_times m2 n2)) (times.times m2 n1) (commutative_times.commutative_times m2 n1))).

