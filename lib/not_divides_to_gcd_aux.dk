def not_divides_to_gcd_aux :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (gcd_aux.gcd_aux (S.S p) m n) (gcd_aux.gcd_aux p n (mod.mod m n))))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_gcd_aux.sym_eq_gcd_aux (S.S p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (y m n) (gcd_aux.gcd_aux p n (mod.mod m n))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) gcd_aux_body.gcd_aux_body p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (y m n) (gcd_aux.gcd_aux p n (mod.mod m n))))) (sym_eq_gcd_aux_body_S.sym_eq_gcd_aux_body_S p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (y m n) (gcd_aux.gcd_aux p n (mod.mod m n))))) (lenm:(sttfa.eps (lt.lt O.O n)) => divnm:(sttfa.eps (Not.Not (divides.divides n m))) => eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat n (gcd_aux.gcd_aux p n (mod.mod m n)) x) (gcd_aux.gcd_aux p n (mod.mod m n))) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat n (gcd_aux.gcd_aux p n (match_nat_type.match_nat_type nat.nat m (p0:(sttfa.etap (sttfa.p nat.nat)) => mod_aux.mod_aux m m p0) n)) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat y (gcd_aux.gcd_aux p n (match_nat_type.match_nat_type nat.nat m (p0:(sttfa.etap (sttfa.p nat.nat)) => mod_aux.mod_aux m m p0) n))) (refl.refl nat.nat (gcd_aux.gcd_aux p n (match_nat_type.match_nat_type nat.nat m (p0:(sttfa.etap (sttfa.p nat.nat)) => mod_aux.mod_aux m m p0) n)))) (dividesb.dividesb n m) (not_divides_to_dividesb_false.not_divides_to_dividesb_false n m lenm divnm)))).

