def injective_invert_permut :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (permut.permut f n) (injn.injn (invert_permut.invert_permut n f) n))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => n:(sttfa.etap (sttfa.p nat.nat)) => permf:(sttfa.eps (permut.permut f n)) => i:(sttfa.etap (sttfa.p nat.nat)) => j:(sttfa.etap (sttfa.p nat.nat)) => lein:(sttfa.eps (le.le i n)) => lejn:(sttfa.eps (le.le j n)) => match_ex_prop.match_ex_prop nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (f p) i)) (sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f i) (invert_permut.invert_permut n f j)) (eq.eq nat.nat i j)) (a:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (And.And (le.le a n) (eq.eq nat.nat (f a) i))) => match_And_prop.match_And_prop (le.le a n) (eq.eq nat.nat (f a) i) (sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f i) (invert_permut.invert_permut n f j)) (eq.eq nat.nat i j)) (lean:(sttfa.eps (le.le a n)) => fa:(sttfa.eps (eq.eq nat.nat (f a) i)) => match_ex_prop.match_ex_prop nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (f p) j)) (sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f i) (invert_permut.invert_permut n f j)) (eq.eq nat.nat i j)) (b:(sttfa.etap (sttfa.p nat.nat)) => _clearme0:(sttfa.eps (And.And (le.le b n) (eq.eq nat.nat (f b) j))) => match_And_prop.match_And_prop (le.le b n) (eq.eq nat.nat (f b) j) (sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f i) (invert_permut.invert_permut n f j)) (eq.eq nat.nat i j)) (lebn:(sttfa.eps (le.le b n)) => fb:(sttfa.eps (eq.eq nat.nat (f b) j)) => match_And_prop.match_And_prop (sttfa.forall nat.nat (i1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i1 n) (le.le (f i1) n))) (injn.injn f n) (sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f i) (invert_permut.invert_permut n f j)) (eq.eq nat.nat i j)) (__:(sttfa.eps (sttfa.forall nat.nat (i0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i0 n) (le.le (f i0) n)))) => injf:(sttfa.eps (injn.injn f n)) => eq_ind.eq_ind nat.nat (f a) (x_1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f x_1) (invert_permut.invert_permut n f j)) (eq.eq nat.nat x_1 j)) (eq_ind.eq_ind nat.nat (f b) (x_1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat (invert_permut.invert_permut n f (f a)) (invert_permut.invert_permut n f x_1)) (eq.eq nat.nat (f a) x_1)) (eq_ind_r.eq_ind_r nat.nat a (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat x (invert_permut.invert_permut n f (f b))) (eq.eq nat.nat (f a) (f b))) (eq_ind_r.eq_ind_r nat.nat b (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat a x) (eq.eq nat.nat (f a) (f b))) (auto:(sttfa.eps (eq.eq nat.nat a b)) => rewrite_r.rewrite_r nat.nat i (__1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __1 (f b)) (rewrite_l.rewrite_l nat.nat a (__1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat i (f __1)) (rewrite_r.rewrite_r nat.nat i (__1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat i __1) (refl.refl nat.nat i) (f a) (let_clause_1068.let_clause_1068 f n permf i j lein lejn a _clearme lean fa b _clearme0 lebn fb __ injf auto)) b auto) (f a) (let_clause_1068.let_clause_1068 f n permf i j lein lejn a _clearme lean fa b _clearme0 lebn fb __ injf auto)) (invert_permut.invert_permut n f (f b)) (invert_permut_f.invert_permut_f f n b lebn injf)) (invert_permut.invert_permut n f (f a)) (invert_permut_f.invert_permut_f f n a lean injf)) j fb) i fa) permf) _clearme0) (permut_to_bijn.permut_to_bijn n f permf j lejn)) _clearme) (permut_to_bijn.permut_to_bijn n f permf i lein).

