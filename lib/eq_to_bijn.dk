def eq_to_bijn :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (g:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (eq.eq nat.nat (f i) (g i)))) (sttfa.impl (bijn.bijn f n) (bijn.bijn g n))))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => g:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => n:(sttfa.etap (sttfa.p nat.nat)) => H:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (eq.eq nat.nat (f i) (g i))))) => bijf:(sttfa.eps (bijn.bijn f n)) => i:(sttfa.etap (sttfa.p nat.nat)) => lein:(sttfa.eps (le.le i n)) => match_ex_prop.match_ex_prop nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (f p) i)) (ex.ex nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (g p) i))) (a:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (And.And (le.le a n) (eq.eq nat.nat (f a) i))) => match_And_prop.match_And_prop (le.le a n) (eq.eq nat.nat (f a) i) (ex.ex nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (g p) i))) (lean:(sttfa.eps (le.le a n)) => fa:(sttfa.eps (eq.eq nat.nat (f a) i)) => ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le x n) (eq.eq nat.nat (g x) i)) a (conj.conj (le.le a n) (eq.eq nat.nat (g a) i) lean (eq_ind.eq_ind nat.nat (f a) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (g a) x_1) (sym_eq.sym_eq nat.nat (f a) (g a) (H a lean)) i fa))) _clearme) (bijf i lein).

