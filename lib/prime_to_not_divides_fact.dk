def prime_to_not_divides_fact :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (prime.prime p) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt n p) (Not.Not (divides.divides p (fact.fact n)))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => primep:(sttfa.eps (prime.prime p)) => n:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt _x_365 p) (Not.Not (divides.divides p (fact.fact _x_365)))) (sym_eq_fact.sym_eq_fact O.O (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (Not.Not (divides.divides p y))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O nat.nat fact_body.fact_body (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (Not.Not (divides.divides p y))) (sym_eq_fact_body_O.sym_eq_fact_body_O (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (Not.Not (divides.divides p y))) (__:(sttfa.eps (le.le (S.S O.O) p)) => nmk.nmk (divides.divides p (S.S O.O)) (divp:(sttfa.eps (divides.divides p (S.S O.O))) => absurd.absurd (le.le p (S.S O.O)) (divides_to_le.divides_to_le p (S.S O.O) (lt_O_S.lt_O_S O.O) divp) (lt_to_not_le.lt_to_not_le (S.S O.O) p (prime_to_lt_SO.prime_to_lt_SO p primep))))))) (n1:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_fact.sym_eq_fact (S.S n1) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (sttfa.impl (lt.lt n1 p) (Not.Not (divides.divides p (fact.fact n1)))) (sttfa.impl (lt.lt (S.S n1) p) (Not.Not (divides.divides p y)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S nat.nat fact_body.fact_body n1 (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (sttfa.impl (lt.lt n1 p) (Not.Not (divides.divides p (fact.fact n1)))) (sttfa.impl (lt.lt (S.S n1) p) (Not.Not (divides.divides p y)))) (sym_eq_fact_body_S.sym_eq_fact_body_S n1 (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (sttfa.impl (lt.lt n1 p) (Not.Not (divides.divides p (fact.fact n1)))) (sttfa.impl (lt.lt (S.S n1) p) (Not.Not (divides.divides p y)))) (Hind:(sttfa.eps (sttfa.impl (lt.lt n1 p) (Not.Not (divides.divides p (fact.fact n1))))) => ltn1:(sttfa.eps (lt.lt (S.S n1) p)) => nmk.nmk (divides.divides p (times.times (fact.fact n1) (S.S n1))) (Hdiv:(sttfa.eps (divides.divides p (times.times (fact.fact n1) (S.S n1)))) => match_Or_prop.match_Or_prop (divides.divides p (fact.fact n1)) (divides.divides p (S.S n1)) False.False (Hdiv0:(sttfa.eps (divides.divides p (fact.fact n1))) => absurd.absurd (divides.divides p (fact.fact n1)) Hdiv0 (Hind (lt_to_le.lt_to_le (S.S n1) p ltn1))) (Hdiv0:(sttfa.eps (divides.divides p (S.S n1))) => absurd.absurd (le.le p (S.S n1)) (divides_to_le.divides_to_le p (S.S n1) (lt_O_S.lt_O_S n1) Hdiv0) (lt_to_not_le.lt_to_not_le (S.S n1) p ltn1)) (divides_times_to_divides.divides_times_to_divides p (fact.fact n1) (S.S n1) primep Hdiv)))))) n.

