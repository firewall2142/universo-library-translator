def sub_hkO :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (h:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (k:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (n1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n2:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow nat.nat bool.bool) (p1:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow nat.nat bool.bool) (p2:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (f1:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall (sttfa.arrow nat.nat nat.nat) (f2:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (eq.eq nat.nat n1 O.O) (sub_hk.sub_hk h k n1 n2 p1 p2 f1 f2))))))))))
  :=
  h:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => k:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => n1:(sttfa.etap (sttfa.p nat.nat)) => n2:(sttfa.etap (sttfa.p nat.nat)) => p1:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => p2:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => f1:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => f2:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => up0:(sttfa.eps (eq.eq nat.nat n1 O.O)) => i:(sttfa.etap (sttfa.p nat.nat)) => lti:(sttfa.eps (lt.lt i n1)) => eq_ind_r.eq_ind_r nat.nat O.O (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq bool.bool (p1 i) true.true) (And.And (And.And (lt.lt (h i) n2) (eq.eq bool.bool (p2 (h i)) true.true)) (eq.eq nat.nat (k (h i)) i))) (falsity.falsity (sttfa.impl (eq.eq bool.bool (p1 i) true.true) (And.And (And.And (lt.lt (h i) n2) (eq.eq bool.bool (p2 (h i)) true.true)) (eq.eq nat.nat (k (h i)) i))) (absurd.absurd (le.le (S.S i) O.O) (eq_coerc.eq_coerc (le.le (S.S i) n1) (le.le (S.S i) O.O) lti (rewrite_r.rewrite_r nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S i) __) (le.le (S.S i) O.O)) (refl.refl sttfa.bool (le.le (S.S i) O.O)) n1 up0)) (not_le_Sn_O.not_le_Sn_O i))) n1 up0.

