def permut_S_to_permut_transpose :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (permut.permut f (S.S m)) (permut.permut (n:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f n)) m))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => m:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (permut.permut f (S.S m))) => match_And_prop.match_And_prop (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S m)) (le.le (f i) (S.S m)))) (injn.injn f (S.S m)) (permut.permut (n:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f n)) m) (permf1:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S m)) (le.le (f i) (S.S m))))) => permf2:(sttfa.eps (injn.injn f (S.S m))) => conj.conj (sttfa.forall nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le x m) (le.le (transpose.transpose (f (S.S m)) (S.S m) (f x)) m))) (injn.injn (n:(sttfa.etap (sttfa.p nat.nat)) => transpose.transpose (f (S.S m)) (S.S m) (f n)) m) (i:(sttfa.etap (sttfa.p nat.nat)) => leim:(sttfa.eps (le.le i m)) => eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => le.le (match_bool_type.match_bool_type nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f i) (eqb.eqb (f i) (S.S m))) x) m) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat (S.S m) (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f i) (eqb.eqb (f i) (S.S m))) (y:(sttfa.etap (sttfa.p nat.nat)) => le.le y m) (match_Or_prop.match_Or_prop (lt.lt (f i) (S.S m)) (eq.eq nat.nat (f i) (S.S m)) (le.le (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f i) (eqb.eqb (f i) (S.S m))) m) (Hfi:(sttfa.eps (lt.lt (f i) (S.S m))) => eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => le.le (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f i) x) m) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat (f (S.S m)) (f i) (y:(sttfa.etap (sttfa.p nat.nat)) => le.le y m) (le_S_S_to_le.le_S_S_to_le (f i) m Hfi)) (eqb.eqb (f i) (S.S m)) (not_eq_to_eqb_false.not_eq_to_eqb_false (f i) (S.S m) (lt_to_not_eq.lt_to_not_eq (f i) (S.S m) Hfi))) (Hfi:(sttfa.eps (eq.eq nat.nat (f i) (S.S m))) => eq_ind_r.eq_ind_r bool.bool true.true (x:(sttfa.etap (sttfa.p bool.bool)) => le.le (match_bool_type.match_bool_type nat.nat (f (S.S m)) (f i) x) m) (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true nat.nat (f (S.S m)) (f i) (y:(sttfa.etap (sttfa.p nat.nat)) => le.le y m) (match_Or_prop.match_Or_prop (lt.lt (f (S.S m)) (S.S m)) (eq.eq nat.nat (f (S.S m)) (S.S m)) (le.le (f (S.S m)) m) (H:(sttfa.eps (lt.lt (f (S.S m)) (S.S m))) => le_S_S_to_le.le_S_S_to_le (f (S.S m)) m H) (H:(sttfa.eps (eq.eq nat.nat (f (S.S m)) (S.S m))) => falsity.falsity (le.le (f (S.S m)) m) (absurd.absurd (eq.eq nat.nat i (S.S m)) (permf2 i (S.S m) (le_S.le_S i m leim) (le_n.le_n (S.S m)) (rewrite_l.rewrite_l nat.nat (f i) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (f i) (f __)) (rewrite_r.rewrite_r nat.nat (f i) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (f i) __) (refl.refl nat.nat (f i)) (f (f i)) (rewrite_r.rewrite_r nat.nat (S.S m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (f (f i)) __) (rewrite_r.rewrite_r nat.nat (S.S m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (f __) (S.S m)) H (f i) Hfi) (f i) Hfi)) (S.S m) Hfi)) (not_to_not.not_to_not (eq.eq nat.nat i (S.S m)) (le.le (S.S m) m) (auto:(sttfa.eps (eq.eq nat.nat i (S.S m))) => eq_coerc.eq_coerc (le.le i m) (le.le (S.S m) m) leim (rewrite_l.rewrite_l nat.nat i (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le i m) (le.le __ m)) (refl.refl sttfa.bool (le.le i m)) (S.S m) auto)) (lt_to_not_le.lt_to_not_le m (S.S m) (le_n.le_n (S.S m)))))) (le_to_or_lt_eq.le_to_or_lt_eq (f (S.S m)) (S.S m) (permf1 (S.S m) (le_n.le_n (S.S m)))))) (eqb.eqb (f i) (S.S m)) (eq_to_eqb_true.eq_to_eqb_true (f i) (S.S m) Hfi)) (le_to_or_lt_eq.le_to_or_lt_eq (f i) (S.S m) (permf1 i (le_S.le_S i m leim))))) (eqb.eqb (f i) (f (S.S m))) (not_eq_to_eqb_false.not_eq_to_eqb_false (f i) (f (S.S m)) (nmk.nmk (eq.eq nat.nat (f i) (f (S.S m))) (H:(sttfa.eps (eq.eq nat.nat (f i) (f (S.S m)))) => absurd.absurd (eq.eq nat.nat i (S.S m)) (permf2 i (S.S m) (le_S.le_S i m leim) (le_n.le_n (S.S m)) H) (lt_to_not_eq.lt_to_not_eq i (S.S m) (le_S_S.le_S_S i m leim)))))) (a:(sttfa.etap (sttfa.p nat.nat)) => b:(sttfa.etap (sttfa.p nat.nat)) => leam:(sttfa.eps (le.le a m)) => lebm:(sttfa.eps (le.le b m)) => H:(sttfa.eps (eq.eq nat.nat (transpose.transpose (f (S.S m)) (S.S m) (f a)) (transpose.transpose (f (S.S m)) (S.S m) (f b)))) => permf2 a b (le_S.le_S a m leam) (le_S.le_S b m lebm) (injective_transpose.injective_transpose (f (S.S m)) (S.S m) (f a) (f b) H))) _clearme.

