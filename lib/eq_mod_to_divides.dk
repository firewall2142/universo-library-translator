def eq_mod_to_divides :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (q:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O q) (sttfa.impl (eq.eq nat.nat (mod.mod n q) (mod.mod m q)) (divides.divides q (minus.minus n m)))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => posq:(sttfa.eps (lt.lt O.O q)) => eqmod:(sttfa.eps (eq.eq nat.nat (mod.mod n q) (mod.mod m q))) => leb_elim.leb_elim n m (__:(sttfa.etap (sttfa.p bool.bool)) => divides.divides q (minus.minus n m)) (nm:(sttfa.eps (le.le n m)) => eq_coerc.eq_coerc (divides.divides q O.O) (divides.divides q (minus.minus n m)) (divides_n_O.divides_n_O q) (rewrite_r.rewrite_r nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (divides.divides q O.O) (divides.divides q __)) (refl.refl sttfa.bool (divides.divides q O.O)) (minus.minus n m) (sym_eq.sym_eq nat.nat O.O (minus.minus n m) (eq_coerc.eq_coerc (eq.eq nat.nat (minus.minus O.O (minus.minus m n)) (minus.minus (plus.plus O.O n) m)) (eq.eq nat.nat O.O (minus.minus n m)) (minus_le_minus_minus_comm.minus_le_minus_minus_comm m n O.O nm) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat __ (minus.minus (plus.plus O.O n) m)) (eq.eq nat.nat O.O (minus.minus n m))) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat O.O (minus.minus __ m)) (eq.eq nat.nat O.O (minus.minus n m))) (refl.refl sttfa.bool (eq.eq nat.nat O.O (minus.minus n m))) (plus.plus O.O n) (plus_O_n.plus_O_n n)) (minus.minus O.O (minus.minus m n)) (minus_O_n.minus_O_n (minus.minus m n))))))) (nm:(sttfa.eps (Not.Not (le.le n m))) => quotient.quotient q (minus.minus n m) (minus.minus (div.div n q) (div.div m q)) (eq_ind_r.eq_ind_r nat.nat (minus.minus (times.times q (div.div n q)) (times.times q (div.div m q))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) x) (eq_ind_r.eq_ind_r nat.nat (times.times (div.div n q) q) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus x (times.times q (div.div m q)))) (eq_ind_r.eq_ind_r nat.nat (times.times (div.div m q) q) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus (times.times (div.div n q) q) x)) (eq_ind_r.eq_ind_r nat.nat (minus.minus n (mod.mod n q)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus x (times.times (div.div m q) q))) (eq_ind_r.eq_ind_r nat.nat (minus.minus n (plus.plus (mod.mod n q) (times.times (div.div m q) q))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) x) (eq_ind_r.eq_ind_r nat.nat (mod.mod m q) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus n (plus.plus x (times.times (div.div m q) q)))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (div.div m q) q) (mod.mod m q)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus n x)) (eq_ind.eq_ind nat.nat m (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) (minus.minus n x_1)) (refl.refl nat.nat (minus.minus n m)) (plus.plus (times.times (div.div m q) q) (mod.mod m q)) (div_mod.div_mod m q)) (plus.plus (mod.mod m q) (times.times (div.div m q) q)) (commutative_plus.commutative_plus (mod.mod m q) (times.times (div.div m q) q))) (mod.mod n q) eqmod) (minus.minus (minus.minus n (mod.mod n q)) (times.times (div.div m q) q)) (minus_plus.minus_plus n (mod.mod n q) (times.times (div.div m q) q))) (times.times (div.div n q) q) (rewrite_r.rewrite_r nat.nat (times.times q (div.div n q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus n (mod.mod n q))) (rewrite_l.rewrite_l nat.nat (times.times q (div.div n q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times q (div.div n q)) __) (refl.refl nat.nat (times.times q (div.div n q))) (minus.minus n (mod.mod n q)) (rewrite_l.rewrite_l nat.nat (times.times (div.div n q) q) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus n (mod.mod n q))) (eq_times_div_minus_mod.eq_times_div_minus_mod n q) (times.times q (div.div n q)) (commutative_times.commutative_times (div.div n q) q))) (times.times (div.div n q) q) (commutative_times.commutative_times (div.div n q) q))) (times.times q (div.div m q)) (commutative_times.commutative_times q (div.div m q))) (times.times q (div.div n q)) (commutative_times.commutative_times q (div.div n q))) (times.times q (minus.minus (div.div n q) (div.div m q))) (distributive_times_minus.distributive_times_minus q (div.div n q) (div.div m q)))).

