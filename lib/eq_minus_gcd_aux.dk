def eq_minus_gcd_aux :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n p) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux p m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux p m n)))))))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n _x_365) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux _x_365 m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux _x_365 m n)))))))))) (m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => posn:(sttfa.eps (lt.lt O.O n)) => lenm:(sttfa.eps (le.le n m)) => lenO:(sttfa.eps (le.le n O.O)) => falsity.falsity (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux O.O m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux O.O m n))))) (absurd.absurd (lt.lt O.O n) posn (le_to_not_lt.le_to_not_lt n O.O lenO))) (q:(sttfa.etap (sttfa.p nat.nat)) => Hind:(sttfa.eps (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n q) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux q m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux q m n))))))))))) => m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => posn:(sttfa.eps (lt.lt O.O n)) => lenm:(sttfa.eps (le.le n m)) => lenS:(sttfa.eps (le.le n (S.S q))) => match_Or_prop.match_Or_prop (divides.divides n m) (Not.Not (divides.divides n m)) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux (S.S q) m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux (S.S q) m n))))) (divnm:(sttfa.eps (divides.divides n m)) => eq_ind_r.eq_ind_r nat.nat n (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) x) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) x)))) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times x n) (times.times b m)) n) (eq.eq nat.nat (minus.minus (times.times b m) (times.times x n)) n))) (S.S O.O) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times (S.S O.O) n) (times.times x m)) n) (eq.eq nat.nat (minus.minus (times.times x m) (times.times (S.S O.O) n)) n)) O.O (or_introl.or_introl (eq.eq nat.nat (minus.minus (times.times (S.S O.O) n) (times.times O.O m)) n) (eq.eq nat.nat (minus.minus (times.times O.O m) (times.times (S.S O.O) n)) n) (rewrite_r.rewrite_r nat.nat (times.times n (S.S O.O)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times O.O m)) n) (rewrite_l.rewrite_l nat.nat (plus.plus n (times.times n O.O)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times O.O m)) n) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus n __) (times.times O.O m)) n) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times O.O m)) n) (rewrite_r.rewrite_r nat.nat (times.times m O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n __) n) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n __) n) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ n) (refl.refl nat.nat n) (minus.minus n O.O) (minus_n_O.minus_n_O n)) (times.times m O.O) (times_n_O.times_n_O m)) (times.times O.O m) (commutative_times.commutative_times O.O m)) (plus.plus n O.O) (plus_n_O.plus_n_O n)) (times.times n O.O) (times_n_O.times_n_O n)) (times.times n (S.S O.O)) (times_n_Sm.times_n_Sm n O.O)) (times.times (S.S O.O) n) (commutative_times.commutative_times (S.S O.O) n))))) (gcd_aux.gcd_aux (S.S q) m n) (divides_to_gcd_aux.divides_to_gcd_aux (S.S q) m n (lt_O_S.lt_O_S q) posn divnm)) (ndivnm:(sttfa.eps (Not.Not (divides.divides n m))) => eq_ind_r.eq_ind_r nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) x) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) x)))) (match_ex_prop.match_ex_prop nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))))) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux q n (mod.mod m n)))))) (a:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))))) => match_ex_prop.match_ex_prop nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))) (ex.ex nat.nat (a0:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a0 n) (times.times b m)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a0 n)) (gcd_aux.gcd_aux q n (mod.mod m n)))))) (b:(sttfa.etap (sttfa.p nat.nat)) => _clearme0:(sttfa.eps (Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))))) => match_Or_prop.match_Or_prop (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))) (ex.ex nat.nat (a0:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b0:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a0 n) (times.times b0 m)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b0 m) (times.times a0 n)) (gcd_aux.gcd_aux q n (mod.mod m n)))))) (H:(sttfa.eps (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n)))) => eq_ind.eq_ind nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a0:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b0:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a0 n) (times.times b0 m)) x_1) (eq.eq nat.nat (minus.minus (times.times b0 m) (times.times a0 n)) x_1)))) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b0:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times x n) (times.times b0 m)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq.eq nat.nat (minus.minus (times.times b0 m) (times.times x n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))))) (plus.plus b (times.times a (div.div m n))) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times (plus.plus b (times.times a (div.div m n))) n) (times.times x m)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq.eq nat.nat (minus.minus (times.times x m) (times.times (plus.plus b (times.times a (div.div m n))) n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n)))) a (or_intror.or_intror (eq.eq nat.nat (minus.minus (times.times (plus.plus b (times.times a (div.div m n))) n) (times.times a m)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq.eq nat.nat (minus.minus (times.times a m) (times.times (plus.plus b (times.times a (div.div m n))) n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind.eq_ind nat.nat (plus.plus (times.times a (div.div m n)) b) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a m) (times.times x_1 n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (times.times a (div.div m n)) n) (times.times b n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a m) x) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (div.div m n) n) (mod.mod m n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a x) (plus.plus (times.times (times.times a (div.div m n)) n) (times.times b n))) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind_r.eq_ind_r nat.nat (times.times a (times.times (div.div m n) n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a (plus.plus (times.times (div.div m n) n) (mod.mod m n))) (plus.plus x (times.times b n))) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind.eq_ind nat.nat (plus.plus (mod.mod m n) (times.times (div.div m n) n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a x_1) (plus.plus (times.times a (times.times (div.div m n) n)) (times.times b n))) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times a (mod.mod m n)) (times.times a (times.times (div.div m n) n))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus x (plus.plus (times.times a (times.times (div.div m n) n)) (times.times b n))) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind.eq_ind nat.nat (minus.minus (minus.minus (plus.plus (times.times a (mod.mod m n)) (times.times a (times.times (div.div m n) n))) (times.times a (times.times (div.div m n) n))) (times.times b n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x_1 (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind.eq_ind nat.nat (plus.plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (minus.minus x_1 (times.times a (times.times (div.div m n) n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (eq_ind.eq_ind nat.nat (plus.plus (minus.minus (times.times a (times.times (div.div m n) n)) (times.times a (times.times (div.div m n) n))) (times.times a (mod.mod m n))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus x_1 (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n (div.div m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times a __) (times.times a (times.times (div.div m n) n))) (times.times a (mod.mod m n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n (times.times a (div.div m n))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus __ (times.times a (times.times (div.div m n) n))) (times.times a (mod.mod m n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n (div.div m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times n (times.times a (div.div m n))) (times.times a __)) (times.times a (mod.mod m n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n (times.times a (div.div m n))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times n (times.times a (div.div m n))) __) (times.times a (mod.mod m n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus __ (times.times a (mod.mod m n))) (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_l.rewrite_l nat.nat (times.times a (mod.mod m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) __) (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus (times.times a (mod.mod m n)) (times.times b n))) (rewrite_r.rewrite_r nat.nat (times.times n b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (minus.minus (times.times a (mod.mod m n)) __)) (rewrite_r.rewrite_r nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) __) (refl.refl nat.nat (gcd_aux.gcd_aux q n (mod.mod m n))) (minus.minus (times.times a (mod.mod m n)) (times.times n b)) (let_clause_1544.let_clause_1544 p q Hind m n posn lenm lenS ndivnm a _clearme b _clearme0 H)) (times.times b n) (commutative_times.commutative_times b n)) (minus.minus (times.times a (mod.mod m n)) (times.times n b)) (let_clause_1544.let_clause_1544 p q Hind m n posn lenm lenS ndivnm a _clearme b _clearme0 H)) (times.times b n) (commutative_times.commutative_times b n)) (plus.plus O.O (times.times a (mod.mod m n))) (plus_O_n.plus_O_n (times.times a (mod.mod m n)))) (minus.minus (times.times n (times.times a (div.div m n))) (times.times n (times.times a (div.div m n)))) (minus_n_n.minus_n_n (times.times n (times.times a (div.div m n))))) (times.times a (times.times n (div.div m n))) (times_times.times_times a n (div.div m n))) (times.times (div.div m n) n) (commutative_times.commutative_times (div.div m n) n)) (times.times a (times.times n (div.div m n))) (times_times.times_times a n (div.div m n))) (times.times (div.div m n) n) (commutative_times.commutative_times (div.div m n) n)) (minus.minus (plus.plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n))) (times.times a (times.times (div.div m n) n))) (plus_minus.plus_minus (times.times a (times.times (div.div m n) n)) (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n)) (le_n.le_n (times.times a (times.times (div.div m n) n))))) (plus.plus (times.times a (mod.mod m n)) (times.times a (times.times (div.div m n) n))) (commutative_plus.commutative_plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n)))) (minus.minus (plus.plus (times.times a (mod.mod m n)) (times.times a (times.times (div.div m n) n))) (plus.plus (times.times a (times.times (div.div m n) n)) (times.times b n))) (minus_plus.minus_plus (plus.plus (times.times a (mod.mod m n)) (times.times a (times.times (div.div m n) n))) (times.times a (times.times (div.div m n) n)) (times.times b n))) (times.times a (plus.plus (mod.mod m n) (times.times (div.div m n) n))) (distributive_times_plus.distributive_times_plus a (mod.mod m n) (times.times (div.div m n) n))) (plus.plus (times.times (div.div m n) n) (mod.mod m n)) (commutative_plus.commutative_plus (mod.mod m n) (times.times (div.div m n) n))) (times.times (times.times a (div.div m n)) n) (associative_times.associative_times a (div.div m n) n)) m (div_mod.div_mod m n)) (times.times (plus.plus (times.times a (div.div m n)) b) n) (distributive_times_plus_r.distributive_times_plus_r n (times.times a (div.div m n)) b)) (plus.plus b (times.times a (div.div m n))) (commutative_plus.commutative_plus (times.times a (div.div m n)) b))))) (gcd_aux.gcd_aux q n (mod.mod m n)) H) (H:(sttfa.eps (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))) => eq_ind.eq_ind nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a0:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b0:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a0 n) (times.times b0 m)) x_1) (eq.eq nat.nat (minus.minus (times.times b0 m) (times.times a0 n)) x_1)))) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b0:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times x n) (times.times b0 m)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq.eq nat.nat (minus.minus (times.times b0 m) (times.times x n)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))))) (plus.plus b (times.times a (div.div m n))) (ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times (plus.plus b (times.times a (div.div m n))) n) (times.times x m)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq.eq nat.nat (minus.minus (times.times x m) (times.times (plus.plus b (times.times a (div.div m n))) n)) (minus.minus (times.times b n) (times.times a (mod.mod m n))))) a (or_introl.or_introl (eq.eq nat.nat (minus.minus (times.times (plus.plus b (times.times a (div.div m n))) n) (times.times a m)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq.eq nat.nat (minus.minus (times.times a m) (times.times (plus.plus b (times.times a (div.div m n))) n)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times b n) (times.times (times.times a (div.div m n)) n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus x (times.times a m)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (div.div m n) n) (mod.mod m n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (times.times b n) (times.times (times.times a (div.div m n)) n)) (times.times a x)) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (times.times b n) (times.times (times.times a (div.div m n)) n)) x) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind_r.eq_ind_r nat.nat (times.times a (times.times (div.div m n) n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (times.times b n) x) (plus.plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n)))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind.eq_ind nat.nat (minus.minus (minus.minus (plus.plus (times.times b n) (times.times a (times.times (div.div m n) n))) (times.times a (times.times (div.div m n) n))) (times.times a (mod.mod m n))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x_1 (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind.eq_ind nat.nat (plus.plus (times.times a (times.times (div.div m n) n)) (times.times b n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (minus.minus x_1 (times.times a (times.times (div.div m n) n))) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (eq_ind.eq_ind nat.nat (plus.plus (minus.minus (times.times a (times.times (div.div m n) n)) (times.times a (times.times (div.div m n) n))) (times.times b n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus x_1 (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n (div.div m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times a __) (times.times a (times.times (div.div m n) n))) (times.times b n)) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n (times.times a (div.div m n))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus __ (times.times a (times.times (div.div m n) n))) (times.times b n)) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n (div.div m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times n (times.times a (div.div m n))) (times.times a __)) (times.times b n)) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n (times.times a (div.div m n))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (minus.minus (times.times n (times.times a (div.div m n))) __) (times.times b n)) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus __ (times.times b n)) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus O.O __) (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_l.rewrite_l nat.nat (times.times n b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times a (mod.mod m n))) (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus (times.times b n) (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (times.times n b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (minus.minus __ (times.times a (mod.mod m n)))) (rewrite_r.rewrite_r nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (gcd_aux.gcd_aux q n (mod.mod m n)) __) (refl.refl nat.nat (gcd_aux.gcd_aux q n (mod.mod m n))) (minus.minus (times.times n b) (times.times a (mod.mod m n))) (let_clause_15441.let_clause_15441 p q Hind m n posn lenm lenS ndivnm a _clearme b _clearme0 H)) (times.times b n) (commutative_times.commutative_times b n)) (minus.minus (times.times n b) (times.times a (mod.mod m n))) (let_clause_15441.let_clause_15441 p q Hind m n posn lenm lenS ndivnm a _clearme b _clearme0 H)) (plus.plus O.O (times.times n b)) (plus_O_n.plus_O_n (times.times n b))) (times.times b n) (commutative_times.commutative_times b n)) (minus.minus (times.times n (times.times a (div.div m n))) (times.times n (times.times a (div.div m n)))) (minus_n_n.minus_n_n (times.times n (times.times a (div.div m n))))) (times.times a (times.times n (div.div m n))) (times_times.times_times a n (div.div m n))) (times.times (div.div m n) n) (commutative_times.commutative_times (div.div m n) n)) (times.times a (times.times n (div.div m n))) (times_times.times_times a n (div.div m n))) (times.times (div.div m n) n) (commutative_times.commutative_times (div.div m n) n)) (minus.minus (plus.plus (times.times a (times.times (div.div m n) n)) (times.times b n)) (times.times a (times.times (div.div m n) n))) (plus_minus.plus_minus (times.times a (times.times (div.div m n) n)) (times.times a (times.times (div.div m n) n)) (times.times b n) (le_n.le_n (times.times a (times.times (div.div m n) n))))) (plus.plus (times.times b n) (times.times a (times.times (div.div m n) n))) (commutative_plus.commutative_plus (times.times a (times.times (div.div m n) n)) (times.times b n))) (minus.minus (plus.plus (times.times b n) (times.times a (times.times (div.div m n) n))) (plus.plus (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n)))) (minus_plus.minus_plus (plus.plus (times.times b n) (times.times a (times.times (div.div m n) n))) (times.times a (times.times (div.div m n) n)) (times.times a (mod.mod m n)))) (times.times (times.times a (div.div m n)) n) (associative_times.associative_times a (div.div m n) n)) (times.times a (plus.plus (times.times (div.div m n) n) (mod.mod m n))) (distributive_times_plus.distributive_times_plus a (times.times (div.div m n) n) (mod.mod m n))) m (div_mod.div_mod m n)) (times.times (plus.plus b (times.times a (div.div m n))) n) (distributive_times_plus_r.distributive_times_plus_r n b (times.times a (div.div m n))))))) (gcd_aux.gcd_aux q n (mod.mod m n)) H) _clearme0) _clearme) (Hind n (mod.mod m n) (match_Or_prop.match_Or_prop (lt.lt O.O (mod.mod m n)) (eq.eq nat.nat O.O (mod.mod m n)) (lt.lt O.O (mod.mod m n)) (auto:(sttfa.eps (lt.lt O.O (mod.mod m n))) => auto) (modO:(sttfa.eps (eq.eq nat.nat O.O (mod.mod m n))) => falsity.falsity (lt.lt O.O (mod.mod m n)) (absurd.absurd (divides.divides n m) (mod_O_to_divides.mod_O_to_divides n m posn (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ O.O) (refl.refl nat.nat O.O) (mod.mod m n) modO)) ndivnm)) (le_to_or_lt_eq.le_to_or_lt_eq O.O (mod.mod m n) (le_O_n.le_O_n (mod.mod m n)))) (lt_to_le.lt_to_le (mod.mod m n) n (lt_mod_m_m.lt_mod_m_m m n posn)) (le_S_S_to_le.le_S_S_to_le (mod.mod m n) q (transitive_le.transitive_le (S.S (mod.mod m n)) n (S.S q) (lt_mod_m_m.lt_mod_m_m m n posn) lenS)))) (gcd_aux.gcd_aux (S.S q) m n) (not_divides_to_gcd_aux.not_divides_to_gcd_aux q m n posn ndivnm)) (decidable_divides.decidable_divides n m)) p.

