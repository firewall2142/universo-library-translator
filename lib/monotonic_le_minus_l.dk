def monotonic_le_minus_l :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (q:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le q p) (le.le (minus.minus q n) (minus.minus p n))))))
  :=
  nat_elim2.nat_elim2 (__:(sttfa.etap (sttfa.p nat.nat)) => _0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le _0 __) (le.le (minus.minus _0 n) (minus.minus __ n)))) (p:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => lePO:(sttfa.eps (le.le p O.O)) => le_n_O_elim.le_n_O_elim p lePO (__:(sttfa.etap (sttfa.p nat.nat)) => le.le (minus.minus __ q) (minus.minus O.O q)) (le_n.le_n (minus.minus O.O q))) (p:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_minus.sym_eq_minus (S.S p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y q))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y q))) (sym_eq_minus_body_S.sym_eq_minus_body_S p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y q))) (eq_plus_body_O.eq_plus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_filter_nat_type_O.eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) plus_body.plus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_plus.eq_plus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_minus_body_O.eq_minus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_filter_nat_type_O.eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_minus.eq_minus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (y (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_minus_body_O.eq_minus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (minus.minus (y q) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_filter_nat_type_O.eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) minus_body.minus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (minus.minus (y q) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (eq_minus.eq_minus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le O.O (S.S p)) (le.le (minus.minus O.O q) (plus.plus (minus.minus (y q) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))) (auto:(sttfa.eps (le.le O.O (S.S p))) => le_plus_minus_m_m.le_plus_minus_m_m (minus.minus O.O q) (match_nat_type.match_nat_type nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) q)))))))))))))) (p:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => Hind:(sttfa.eps (sttfa.forall nat.nat (n0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le q p) (le.le (minus.minus q n0) (minus.minus p n0))))) => n:(sttfa.etap (sttfa.p nat.nat)) => match_nat_prop.match_nat_prop (__:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (minus.minus (S.S q) __) (minus.minus (S.S p) __))) (sym_eq_minus.sym_eq_minus (S.S q) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y O.O) (minus.minus (S.S p) O.O))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y O.O) (minus.minus (S.S p) O.O))) (sym_eq_minus_body_S.sym_eq_minus_body_S q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y O.O) (minus.minus (S.S p) O.O))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O nat.nat (S.S q) (z:(sttfa.etap (sttfa.p nat.nat)) => minus.minus q z) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le y (minus.minus (S.S p) O.O))) (sym_eq_minus.sym_eq_minus (S.S p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (S.S q) (y O.O))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (S.S q) (y O.O))) (sym_eq_minus_body_S.sym_eq_minus_body_S p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (S.S q) (y O.O))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (S.S q) y)) (auto:(sttfa.eps (le.le (S.S q) (S.S p))) => auto))))))))) (sym_eq_minus.sym_eq_minus (S.S q) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y (S.S a)) (minus.minus (S.S p) (S.S a))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y (S.S a)) (minus.minus (S.S p) (S.S a))))) (sym_eq_minus_body_S.sym_eq_minus_body_S q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (y (S.S a)) (minus.minus (S.S p) (S.S a))))) (a:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat (S.S q) (z:(sttfa.etap (sttfa.p nat.nat)) => minus.minus q z) a (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le y (minus.minus (S.S p) (S.S a)))) (sym_eq_minus.sym_eq_minus (S.S p) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (minus.minus q a) (y (S.S a)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) minus_body.minus_body p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (minus.minus q a) (y (S.S a)))) (sym_eq_minus_body_S.sym_eq_minus_body_S p (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (minus.minus q a) (y (S.S a)))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat (S.S p) (q0:(sttfa.etap (sttfa.p nat.nat)) => minus.minus p q0) a (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (S.S q) (S.S p)) (le.le (minus.minus q a) y)) (leSS:(sttfa.eps (le.le (S.S q) (S.S p))) => Hind a (eq_coerc.eq_coerc (le.le (pred.pred (S.S q)) (pred.pred (S.S p))) (le.le q p) (monotonic_pred.monotonic_pred (S.S q) (S.S p) leSS) (rewrite_l.rewrite_l nat.nat q (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (pred.pred (S.S p))) (le.le q p)) (rewrite_l.rewrite_l nat.nat p (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le q __) (le.le q p)) (refl.refl sttfa.bool (le.le q p)) (pred.pred (S.S p)) (pred_Sn.pred_Sn p)) (pred.pred (S.S q)) (pred_Sn.pred_Sn q)))))))))))) n).

