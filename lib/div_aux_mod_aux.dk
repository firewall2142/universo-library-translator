def div_aux_mod_aux :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux p n m) (S.S m)) (mod_aux.mod_aux p n m))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux _x_365 n m) (S.S m)) (mod_aux.mod_aux _x_365 n m))))) (n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_div_aux.sym_eq_div_aux O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux O.O n m))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) div_aux_body.div_aux_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux O.O n m))) (sym_eq_div_aux_body_O.sym_eq_div_aux_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux O.O n m))) (eq_match_nat_type_O.eq_match_nat_type_O nat.nat O.O (q:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) (leb.leb n m)) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times y (S.S m)) (mod_aux.mod_aux O.O n m))) (sym_eq_mod_aux.sym_eq_mod_aux O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) O.O) n m) (S.S m)) (y n m))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) mod_aux_body.mod_aux_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) O.O) n m) (S.S m)) (y n m))) (sym_eq_mod_aux_body_O.sym_eq_mod_aux_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) O.O) n m) (S.S m)) (y n m))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O nat.nat O.O (q:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) (leb.leb n m)) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => y) n m) (S.S m)) n)) (sym_eq_times.sym_eq_times O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (plus.plus (y (S.S m)) n)) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) times_body.times_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (plus.plus (y (S.S m)) n)) (sym_eq_times_body_O.sym_eq_times_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (plus.plus (y (S.S m)) n)) (sym_eq_plus.sym_eq_plus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (y n)) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) plus_body.plus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (y n)) (sym_eq_plus_body_O.sym_eq_plus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => eq.eq nat.nat n (y n)) (refl.refl nat.nat n))))))))))))))) (q:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_div_aux.sym_eq_div_aux (S.S q) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux q n m) (S.S m)) (mod_aux.mod_aux q n m))))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux (S.S q) n m)))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) div_aux_body.div_aux_body q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux q n m) (S.S m)) (mod_aux.mod_aux q n m))))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux (S.S q) n m)))))) (sym_eq_div_aux_body_S.sym_eq_div_aux_body_S q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux q n m) (S.S m)) (mod_aux.mod_aux q n m))))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (y n m) (S.S m)) (mod_aux.mod_aux (S.S q) n m)))))) (Hind:(sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times (div_aux.div_aux q n m) (S.S m)) (mod_aux.mod_aux q n m)))))) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => eq_match_nat_type_S.eq_match_nat_type_S nat.nat O.O (q0:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q0 (minus.minus n (S.S m)) m)) (leb.leb n m)) q (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times y (S.S m)) (mod_aux.mod_aux (S.S q) n m))) (sym_eq_mod_aux.sym_eq_mod_aux (S.S q) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q0:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q0 (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) (S.S q)) n m) (S.S m)) (y n m))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) mod_aux_body.mod_aux_body q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q0:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q0 (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) (S.S q)) n m) (S.S m)) (y n m))) (sym_eq_mod_aux_body_S.sym_eq_mod_aux_body_S q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => eq.eq nat.nat n (plus.plus (times.times ((m0:(sttfa.etap (sttfa.p nat.nat)) => n0:(sttfa.etap (sttfa.p nat.nat)) => match_nat_type.match_nat_type nat.nat O.O (q0:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q0 (minus.minus m0 (S.S n0)) n0)) (leb.leb m0 n0)) (S.S q)) n m) (S.S m)) (y n m))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S nat.nat O.O (z:(sttfa.etap (sttfa.p nat.nat)) => match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux z (minus.minus n (S.S m)) m)) (leb.leb n m)) q (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times y (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) (leb.leb n m)))) (leb_elim.leb_elim n m (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat n (plus.plus (times.times (match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) __) (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) __))) (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat n (plus.plus (times.times x (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) true.true)))) (sym_eq_times.sym_eq_times O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (plus.plus (y (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) true.true)))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) times_body.times_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (plus.plus (y (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) true.true)))) (sym_eq_times_body_O.sym_eq_times_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (plus.plus (y (S.S m)) (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) true.true)))) (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (eq.eq nat.nat n (plus.plus O.O y))) (sym_eq_plus.sym_eq_plus O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (y n))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat nat.nat) plus_body.plus_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (y n))) (sym_eq_plus_body_O.sym_eq_plus_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (le.le n m) (eq.eq nat.nat n (y n))) (lenm:(sttfa.eps (le.le n m)) => refl.refl nat.nat n))))))))) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) (x:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (times.times (match_bool_type.match_bool_type nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) false.false) (S.S m)) x))) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat O.O (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (times.times y (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_times.sym_eq_times (S.S (div_aux.div_aux q (minus.minus n (S.S m)) m)) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) times_body.times_body (div_aux.div_aux q (minus.minus n (S.S m)) m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_times_body_S.sym_eq_times_body_S (div_aux.div_aux q (minus.minus n (S.S m)) m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_plus.sym_eq_plus (S.S m) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) plus_body.plus_body m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_plus_body_S.sym_eq_plus_body_S m (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (plus.plus (y (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_plus.sym_eq_plus (S.S (plus.plus m (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m)))) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (y (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) plus_body.plus_body (plus.plus m (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (y (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (sym_eq_plus_body_S.sym_eq_plus_body_S (plus.plus m (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.impl (Not.Not (le.le n m)) (eq.eq nat.nat n (y (mod_aux.mod_aux q (minus.minus n (S.S m)) m)))) (lenm:(sttfa.eps (Not.Not (le.le n m))) => eq_ind_r.eq_ind_r nat.nat (plus.plus m (plus.plus (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (S.S x)) (eq_ind.eq_ind nat.nat (minus.minus n (S.S m)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (S.S (plus.plus m x_1))) (eq_coerc.eq_coerc (eq.eq nat.nat n (plus.plus (minus.minus n (S.S m)) (S.S m))) (eq.eq nat.nat n (S.S (plus.plus m (minus.minus n (S.S m))))) (plus_minus_m_m.plus_minus_m_m n (S.S m) (not_le_to_lt.not_le_to_lt n m lenm)) (rewrite_r.rewrite_r nat.nat (pred.pred (minus.minus n m)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n (plus.plus __ (S.S m))) (eq.eq nat.nat n (S.S (plus.plus m (minus.minus n (S.S m)))))) (rewrite_r.rewrite_r nat.nat (pred.pred (minus.minus n m)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n (plus.plus (pred.pred (minus.minus n m)) (S.S m))) (eq.eq nat.nat n (S.S (plus.plus m __)))) (rewrite_r.rewrite_r nat.nat (plus.plus m (S.S (pred.pred (minus.minus n m)))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n (plus.plus (pred.pred (minus.minus n m)) (S.S m))) (eq.eq nat.nat n __)) (rewrite_r.rewrite_r nat.nat (plus.plus m (S.S (pred.pred (minus.minus n m)))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n __) (eq.eq nat.nat n (plus.plus m (S.S (pred.pred (minus.minus n m)))))) (refl.refl sttfa.bool (eq.eq nat.nat n (plus.plus m (S.S (pred.pred (minus.minus n m)))))) (plus.plus (pred.pred (minus.minus n m)) (S.S m)) (rewrite_l.rewrite_l nat.nat (S.S (plus.plus (pred.pred (minus.minus n m)) m)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (plus.plus m (S.S (pred.pred (minus.minus n m))))) (rewrite_l.rewrite_l nat.nat (plus.plus m (pred.pred (minus.minus n m))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (S.S __) (plus.plus m (S.S (pred.pred (minus.minus n m))))) (plus_n_Sm.plus_n_Sm m (pred.pred (minus.minus n m))) (plus.plus (pred.pred (minus.minus n m)) m) (commutative_plus.commutative_plus m (pred.pred (minus.minus n m)))) (plus.plus (pred.pred (minus.minus n m)) (S.S m)) (plus_n_Sm.plus_n_Sm (pred.pred (minus.minus n m)) m))) (S.S (plus.plus m (pred.pred (minus.minus n m)))) (plus_n_Sm.plus_n_Sm m (pred.pred (minus.minus n m)))) (minus.minus n (S.S m)) (eq_minus_S_pred.eq_minus_S_pred n m)) (minus.minus n (S.S m)) (eq_minus_S_pred.eq_minus_S_pred n m))) (plus.plus (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)) (Hind (minus.minus n (S.S m)) m)) (plus.plus (plus.plus m (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m))) (mod_aux.mod_aux q (minus.minus n (S.S m)) m)) (associative_plus.associative_plus m (times.times (div_aux.div_aux q (minus.minus n (S.S m)) m) (S.S m)) (mod_aux.mod_aux q (minus.minus n (S.S m)) m))))))))))))))))))))))) p.

