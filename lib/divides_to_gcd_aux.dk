def divides_to_gcd_aux :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq nat.nat (gcd_aux.gcd_aux p m n) n)))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => posp:(sttfa.eps (lt.lt O.O p)) => lt_O_n_elim.lt_O_n_elim p posp (__:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq nat.nat (gcd_aux.gcd_aux __ m n) n))) (l:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_gcd_aux.sym_eq_gcd_aux (S.S l) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq nat.nat (y m n) n))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) gcd_aux_body.gcd_aux_body l (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq nat.nat (y m n) n))) (sym_eq_gcd_aux_body_S.sym_eq_gcd_aux_body_S l (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq nat.nat (y m n) n))) (posn:(sttfa.eps (lt.lt O.O n)) => divnm:(sttfa.eps (divides.divides n m)) => eq_ind_r.eq_ind_r bool.bool true.true (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat n (gcd_aux.gcd_aux l n (mod.mod m n)) x) n) (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true nat.nat n (gcd_aux.gcd_aux l n (match_nat_type.match_nat_type nat.nat m (p0:(sttfa.etap (sttfa.p nat.nat)) => mod_aux.mod_aux m m p0) n)) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat y n) (refl.refl nat.nat n)) (dividesb.dividesb n m) (divides_to_dividesb_true.divides_to_dividesb_true n m posn divnm))))).

