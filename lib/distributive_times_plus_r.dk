def distributive_times_plus_r :
  sttfa.eps (sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (c:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times (plus.plus b c) a) (plus.plus (times.times b a) (times.times c a))))))
  :=
  a:(sttfa.etap (sttfa.p nat.nat)) => b:(sttfa.etap (sttfa.p nat.nat)) => c:(sttfa.etap (sttfa.p nat.nat)) => rewrite_r.rewrite_r nat.nat (times.times a (plus.plus b c)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (plus.plus (times.times b a) (times.times c a))) (rewrite_r.rewrite_r nat.nat (times.times a b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times a (plus.plus b c)) (plus.plus __ (times.times c a))) (rewrite_r.rewrite_r nat.nat (times.times a c) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times a (plus.plus b c)) (plus.plus (times.times a b) __)) (rewrite_l.rewrite_l nat.nat (times.times a (plus.plus b c)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times a (plus.plus b c)) __) (refl.refl nat.nat (times.times a (plus.plus b c))) (plus.plus (times.times a b) (times.times a c)) (distributive_times_plus.distributive_times_plus a b c)) (times.times c a) (commutative_times.commutative_times c a)) (times.times b a) (commutative_times.commutative_times b a)) (times.times (plus.plus b c) a) (commutative_times.commutative_times (plus.plus b c) a).

