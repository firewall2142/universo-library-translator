def plus_to_minus :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat n (plus.plus m p)) (eq.eq nat.nat (minus.minus n m) p)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => eqp:(sttfa.eps (eq.eq nat.nat n (plus.plus m p))) => sym_eq.sym_eq nat.nat p (minus.minus n m) (eq_coerc.eq_coerc (eq.eq nat.nat p (minus.minus (plus.plus p m) m)) (eq.eq nat.nat p (minus.minus n m)) (minus_plus_m_m.minus_plus_m_m p m) (rewrite_r.rewrite_r nat.nat (plus.plus m p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat p (minus.minus __ m)) (eq.eq nat.nat p (minus.minus n m))) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat p (minus.minus __ m)) (eq.eq nat.nat p (minus.minus n m))) (refl.refl sttfa.bool (eq.eq nat.nat p (minus.minus n m))) (plus.plus m p) eqp) (plus.plus p m) (commutative_plus.commutative_plus p m))).

