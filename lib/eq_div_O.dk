def eq_div_O :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt n m) (eq.eq nat.nat (div.div n m) O.O))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => ltnm:(sttfa.eps (lt.lt n m)) => div_mod_spec_to_eq.div_mod_spec_to_eq n m (div.div n m) (mod.mod n m) O.O n (div_mod_spec_div_mod.div_mod_spec_div_mod n m (ltn_to_ltO.ltn_to_ltO n m ltnm)) (div_mod_spec_intro.div_mod_spec_intro n m O.O n ltnm (rewrite_r.rewrite_r nat.nat (times.times m O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus __ n)) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus __ n)) (rewrite_r.rewrite_r nat.nat (plus.plus n O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (refl.refl nat.nat n) (plus.plus n O.O) (plus_n_O.plus_n_O n)) (plus.plus O.O n) (commutative_plus.commutative_plus O.O n)) (times.times m O.O) (times_n_O.times_n_O m)) (times.times O.O m) (commutative_times.commutative_times O.O m))).

