def invert_permut_f :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le m n) (sttfa.impl (injn.injn f n) (eq.eq nat.nat (invert_permut.invert_permut n f (f m)) m))))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => lenm:(sttfa.eps (le.le m n)) => le_ind.le_ind m (x_417:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (injn.injn f x_417) (eq.eq nat.nat (invert_permut.invert_permut x_417 f (f m)) m)) (match_nat_prop.match_nat_prop (__:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (injn.injn f __) (eq.eq nat.nat (invert_permut.invert_permut __ f (f __)) __)) (sym_eq_invert_permut.sym_eq_invert_permut O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f O.O) (eq.eq nat.nat (y f (f O.O)) O.O)) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)) invert_permut_body.invert_permut_body (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f O.O) (eq.eq nat.nat (y f (f O.O)) O.O)) (sym_eq_invert_permut_body_O.sym_eq_invert_permut_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f O.O) (eq.eq nat.nat (y f (f O.O)) O.O)) (eq_ind_r.eq_ind_r bool.bool true.true (x:(sttfa.etap (sttfa.p bool.bool)) => sttfa.impl (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (sttfa.impl (le.le j O.O) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j)))))) (eq.eq nat.nat (match_bool_type.match_bool_type nat.nat O.O O.O x) O.O)) (auto:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i O.O) (sttfa.impl (le.le j O.O) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j))))))) => eq_match_bool_type_true.eq_match_bool_type_true nat.nat O.O O.O (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat O.O O.O true.true) y) (refl.refl nat.nat (match_bool_type.match_bool_type nat.nat O.O O.O true.true))) (eqb.eqb (f O.O) (f O.O)) (eqb_n_n.eqb_n_n (f O.O)))))) (a:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_invert_permut.sym_eq_invert_permut (S.S a) (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f (S.S a)) (eq.eq nat.nat (y f (f (S.S a))) (S.S a))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)) invert_permut_body.invert_permut_body a (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f (S.S a)) (eq.eq nat.nat (y f (f (S.S a))) (S.S a))) (sym_eq_invert_permut_body_S.sym_eq_invert_permut_body_S a (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (injn.injn f (S.S a)) (eq.eq nat.nat (y f (f (S.S a))) (S.S a))) (eq_ind_r.eq_ind_r bool.bool true.true (x:(sttfa.etap (sttfa.p bool.bool)) => sttfa.impl (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S a)) (sttfa.impl (le.le j (S.S a)) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j)))))) (eq.eq nat.nat (match_bool_type.match_bool_type nat.nat (S.S a) (invert_permut.invert_permut a f (f (S.S a))) x) (S.S a))) (auto:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i (S.S a)) (sttfa.impl (le.le j (S.S a)) (sttfa.impl (eq.eq nat.nat (f i) (f j)) (eq.eq nat.nat i j))))))) => eq_match_bool_type_true.eq_match_bool_type_true nat.nat (S.S a) (invert_permut.invert_permut a f (f (S.S a))) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat (S.S a) (invert_permut.invert_permut a f (f (S.S a))) true.true) y) (refl.refl nat.nat (match_bool_type.match_bool_type nat.nat (S.S a) (invert_permut.invert_permut a f (f (S.S a))) true.true))) (eqb.eqb (f (S.S a)) (f (S.S a))) (eqb_n_n.eqb_n_n (f (S.S a))))))) m) (m0:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_invert_permut.sym_eq_invert_permut (S.S m0) (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le m m0) (sttfa.impl (sttfa.impl (injn.injn f m0) (eq.eq nat.nat (invert_permut.invert_permut m0 f (f m)) m)) (sttfa.impl (injn.injn f (S.S m0)) (eq.eq nat.nat (y f (f m)) m)))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)) invert_permut_body.invert_permut_body m0 (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le m m0) (sttfa.impl (sttfa.impl (injn.injn f m0) (eq.eq nat.nat (invert_permut.invert_permut m0 f (f m)) m)) (sttfa.impl (injn.injn f (S.S m0)) (eq.eq nat.nat (y f (f m)) m)))) (sym_eq_invert_permut_body_S.sym_eq_invert_permut_body_S m0 (y:(sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow nat.nat nat.nat) (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le m m0) (sttfa.impl (sttfa.impl (injn.injn f m0) (eq.eq nat.nat (invert_permut.invert_permut m0 f (f m)) m)) (sttfa.impl (injn.injn f (S.S m0)) (eq.eq nat.nat (y f (f m)) m)))) (lem:(sttfa.eps (le.le m m0)) => H:(sttfa.eps (sttfa.impl (injn.injn f m0) (eq.eq nat.nat (invert_permut.invert_permut m0 f (f m)) m))) => H1:(sttfa.eps (injn.injn f (S.S m0))) => eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat (S.S m0) (invert_permut.invert_permut m0 f (f m)) x) m) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat (S.S m0) (invert_permut.invert_permut m0 f (f m)) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat y m) (H (injn_Sn_n.injn_Sn_n f m0 H1))) (eqb.eqb (f m) (f (S.S m0))) (not_eq_to_eqb_false.not_eq_to_eqb_false (f m) (f (S.S m0)) (nmk.nmk (eq.eq nat.nat (f m) (f (S.S m0))) (eqf:(sttfa.eps (eq.eq nat.nat (f m) (f (S.S m0)))) => absurd.absurd (eq.eq nat.nat m (S.S m0)) (H1 m (S.S m0) (le_S.le_S m m0 lem) (le_n.le_n (S.S m0)) (rewrite_l.rewrite_l nat.nat (f m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (f m) __) (refl.refl nat.nat (f m)) (f (S.S m0)) eqf)) (lt_to_not_eq.lt_to_not_eq m (S.S m0) (le_S_S.le_S_S m m0 lem))))))))) n lenm.

