def eq_times_plus_to_congruent :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (r:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (sttfa.impl (eq.eq nat.nat n (plus.plus (times.times r p) m)) (congruent.congruent n m p)))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => r:(sttfa.etap (sttfa.p nat.nat)) => posp:(sttfa.eps (lt.lt O.O p)) => Hn:(sttfa.eps (eq.eq nat.nat n (plus.plus (times.times r p) m))) => div_mod_spec_to_eq2.div_mod_spec_to_eq2 n p (div.div n p) (mod.mod n p) (plus.plus r (div.div m p)) (mod.mod m p) (div_mod_spec_div_mod.div_mod_spec_div_mod n p posp) (div_mod_spec_intro.div_mod_spec_intro n p (plus.plus r (div.div m p)) (mod.mod m p) (lt_mod_m_m.lt_mod_m_m m p posp) (eq_ind_r.eq_ind_r nat.nat (times.times p (plus.plus r (div.div m p))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus x (mod.mod m p))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times p r) (times.times p (div.div m p))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus x (mod.mod m p))) (eq_ind_r.eq_ind_r nat.nat (times.times r p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (plus.plus x (times.times p (div.div m p))) (mod.mod m p))) (eq_ind_r.eq_ind_r nat.nat (times.times (div.div m p) p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (plus.plus (times.times r p) x) (mod.mod m p))) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times r p) (plus.plus (times.times (div.div m p) p) (mod.mod m p))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n x) (rewrite_r.rewrite_r nat.nat (times.times p r) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus __ (plus.plus (times.times (div.div m p) p) (mod.mod m p)))) (rewrite_r.rewrite_r nat.nat (times.times p (div.div m p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times p r) (plus.plus __ (mod.mod m p)))) (rewrite_r.rewrite_r nat.nat (plus.plus (mod.mod m p) (times.times p (div.div m p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times p r) __)) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus (times.times p r) __)) (rewrite_r.rewrite_r nat.nat (plus.plus m (times.times p r)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (refl.refl nat.nat n) (plus.plus m (times.times p r)) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times p r) m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (rewrite_l.rewrite_l nat.nat (times.times r p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus __ m)) Hn (times.times p r) (commutative_times.commutative_times r p)) (plus.plus m (times.times p r)) (commutative_plus.commutative_plus (times.times p r) m))) (plus.plus (times.times p r) m) (commutative_plus.commutative_plus (times.times p r) m)) (plus.plus (mod.mod m p) (times.times p (div.div m p))) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times p (div.div m p)) (mod.mod m p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m __) (rewrite_l.rewrite_l nat.nat (times.times (div.div m p) p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (plus.plus __ (mod.mod m p))) (div_mod.div_mod m p) (times.times p (div.div m p)) (commutative_times.commutative_times (div.div m p) p)) (plus.plus (mod.mod m p) (times.times p (div.div m p))) (commutative_plus.commutative_plus (times.times p (div.div m p)) (mod.mod m p)))) (plus.plus (times.times p (div.div m p)) (mod.mod m p)) (commutative_plus.commutative_plus (times.times p (div.div m p)) (mod.mod m p))) (times.times (div.div m p) p) (commutative_times.commutative_times (div.div m p) p)) (times.times r p) (commutative_times.commutative_times r p)) (plus.plus (plus.plus (times.times r p) (times.times (div.div m p) p)) (mod.mod m p)) (associative_plus.associative_plus (times.times r p) (times.times (div.div m p) p) (mod.mod m p))) (times.times p (div.div m p)) (commutative_times.commutative_times p (div.div m p))) (times.times p r) (commutative_times.commutative_times p r)) (times.times p (plus.plus r (div.div m p))) (distributive_times_plus.distributive_times_plus p r (div.div m p))) (times.times (plus.plus r (div.div m p)) p) (commutative_times.commutative_times (plus.plus r (div.div m p)) p))).

