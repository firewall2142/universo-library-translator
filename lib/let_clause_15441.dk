def let_clause_15441 :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (q:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n q) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux q m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux q m n)))))))))) (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n (S.S q)) (sttfa.impl (Not.Not (divides.divides n m)) (sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))))) (sttfa.forall nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))) (sttfa.impl (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times n b) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))))))))))))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => Hind:(sttfa.eps (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (le.le n m) (sttfa.impl (le.le n q) (ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b m)) (gcd_aux.gcd_aux q m n)) (eq.eq nat.nat (minus.minus (times.times b m) (times.times a n)) (gcd_aux.gcd_aux q m n))))))))))) => m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => posn:(sttfa.eps (lt.lt O.O n)) => lenm:(sttfa.eps (le.le n m)) => lenS:(sttfa.eps (le.le n (S.S q))) => ndivnm:(sttfa.eps (Not.Not (divides.divides n m))) => a:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))))) => b:(sttfa.etap (sttfa.p nat.nat)) => _clearme0:(sttfa.eps (Or.Or (eq.eq nat.nat (minus.minus (times.times a (mod.mod m n)) (times.times b n)) (gcd_aux.gcd_aux q n (mod.mod m n))) (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))))) => H:(sttfa.eps (eq.eq nat.nat (minus.minus (times.times b n) (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n)))) => rewrite_l.rewrite_l nat.nat (times.times b n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times a (mod.mod m n))) (gcd_aux.gcd_aux q n (mod.mod m n))) H (times.times n b) (commutative_times.commutative_times b n).

