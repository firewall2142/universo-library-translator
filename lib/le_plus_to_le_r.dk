def le_plus_to_le_r :
  sttfa.eps (sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le (plus.plus n a) (plus.plus m a)) (le.le n m)))))
  :=
  a:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => auto:(sttfa.eps (le.le (plus.plus n a) (plus.plus m a))) => le_plus_to_le.le_plus_to_le a n m (eq_coerc.eq_coerc (le.le (plus.plus n a) (plus.plus m a)) (le.le (plus.plus a n) (plus.plus a m)) auto (rewrite_r.rewrite_r nat.nat (plus.plus a n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (plus.plus m a)) (le.le (plus.plus a n) (plus.plus a m))) (rewrite_r.rewrite_r nat.nat (plus.plus a m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (plus.plus a n) __) (le.le (plus.plus a n) (plus.plus a m))) (refl.refl sttfa.bool (le.le (plus.plus a n) (plus.plus a m))) (plus.plus m a) (commutative_plus.commutative_plus m a)) (plus.plus n a) (commutative_plus.commutative_plus n a))).

