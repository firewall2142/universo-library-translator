def eqb_elim :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m)))))))
  :=
  nat_elim2.nat_elim2 (__:(sttfa.etap (sttfa.p nat.nat)) => _0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat __ _0) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat __ _0)) (P false.false)) (P (eqb.eqb __ _0))))) (n:(sttfa.etap (sttfa.p nat.nat)) => match_nat_prop.match_nat_prop (__:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O __) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O __)) (P false.false)) (P (eqb.eqb O.O __))))) (sym_eq_eqb.sym_eq_eqb O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O O.O)) (P false.false)) (P (y O.O))))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat bool.bool) eqb_body.eqb_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O O.O)) (P false.false)) (P (y O.O))))) (sym_eq_eqb_body_O.sym_eq_eqb_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O O.O)) (P false.false)) (P (y O.O))))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O bool.bool true.true (q:(sttfa.etap (sttfa.p nat.nat)) => false.false) (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O O.O)) (P false.false)) (P y)))) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto:(sttfa.eps (sttfa.impl (eq.eq nat.nat O.O O.O) (P true.true))) => auto':(sttfa.eps (sttfa.impl (Not.Not (eq.eq nat.nat O.O O.O)) (P false.false))) => auto (refl.refl nat.nat O.O)))))) (auto:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_eqb.sym_eq_eqb O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O (S.S auto)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O (S.S auto))) (P false.false)) (P (y (S.S auto)))))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat bool.bool) eqb_body.eqb_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O (S.S auto)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O (S.S auto))) (P false.false)) (P (y (S.S auto)))))) (sym_eq_eqb_body_O.sym_eq_eqb_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O (S.S auto)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O (S.S auto))) (P false.false)) (P (y (S.S auto)))))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S bool.bool true.true (q:(sttfa.etap (sttfa.p nat.nat)) => false.false) auto (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat O.O (S.S auto)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat O.O (S.S auto))) (P false.false)) (P y)))) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto':(sttfa.eps (sttfa.impl (eq.eq nat.nat O.O (S.S auto)) (P true.true))) => auto'':(sttfa.eps (sttfa.impl (Not.Not (eq.eq nat.nat O.O (S.S auto))) (P false.false))) => auto'' (not_eq_O_S.not_eq_O_S auto)))))) n) (n:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_eqb.sym_eq_eqb (S.S n) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat bool.bool) eqb_body.eqb_body n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_eqb_body_S.sym_eq_eqb_body_S n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O bool.bool false.false (q:(sttfa.etap (sttfa.p nat.nat)) => eqb.eqb n q) (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) O.O)) (P false.false)) (P y)))) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto:(sttfa.eps (sttfa.impl (eq.eq nat.nat (S.S n) O.O) (P true.true))) => auto':(sttfa.eps (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) O.O)) (P false.false))) => auto' (sym_not_eq.sym_not_eq nat.nat O.O (S.S n) (not_eq_O_S.not_eq_O_S n))))))) (n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_eqb.sym_eq_eqb (S.S n) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat bool.bool) eqb_body.eqb_body n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_eqb_body_S.sym_eq_eqb_body_S n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S bool.bool false.false (q:(sttfa.etap (sttfa.p nat.nat)) => eqb.eqb n q) m (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) (S.S m))) (P false.false)) (P y))))) (auto:(sttfa.eps (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (eq.eq nat.nat n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (eq.eq nat.nat n m)) (P false.false)) (P (eqb.eqb n m)))))) => P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto':(sttfa.eps (sttfa.impl (eq.eq nat.nat (S.S n) (S.S m)) (P true.true))) => auto'':(sttfa.eps (sttfa.impl (Not.Not (eq.eq nat.nat (S.S n) (S.S m))) (P false.false))) => auto P (auto''':(sttfa.eps (eq.eq nat.nat n m)) => auto' (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (S.S n) (S.S __)) (refl.refl nat.nat (S.S n)) m auto''')) (auto''':(sttfa.eps (Not.Not (eq.eq nat.nat n m))) => auto'' (not_eq_S.not_eq_S n m auto'''))))))).

