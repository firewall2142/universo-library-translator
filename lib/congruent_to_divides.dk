def congruent_to_divides :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (sttfa.impl (congruent.congruent n m p) (divides.divides p (minus.minus n m)))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => posp:(sttfa.eps (lt.lt O.O p)) => Hcong:(sttfa.eps (congruent.congruent n m p)) => quotient.quotient p (minus.minus n m) (minus.minus (div.div n p) (div.div m p)) (eq_ind_r.eq_ind_r nat.nat (times.times (minus.minus (div.div n p) (div.div m p)) p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n m) x) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (div.div n p) p) (mod.mod n p)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus x m) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times (div.div m p) p) (mod.mod m p)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus (times.times (div.div n p) p) (mod.mod n p)) x) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_r.rewrite_r nat.nat (times.times p (div.div n p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (plus.plus __ (mod.mod n p)) (plus.plus (times.times (div.div m p) p) (mod.mod m p))) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_r.rewrite_r nat.nat (plus.plus (mod.mod n p) (times.times p (div.div n p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (plus.plus (times.times (div.div m p) p) (mod.mod m p))) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_l.rewrite_l nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (plus.plus (times.times (div.div m p) p) (mod.mod m p))) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_r.rewrite_r nat.nat (times.times p (div.div m p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n (plus.plus __ (mod.mod m p))) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_l.rewrite_l nat.nat (mod.mod n p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n (plus.plus (times.times p (div.div m p)) __)) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_r.rewrite_r nat.nat (plus.plus (mod.mod n p) (times.times p (div.div m p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus n __) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_l.rewrite_l nat.nat (minus.minus (minus.minus n (mod.mod n p)) (times.times p (div.div m p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_l.rewrite_l nat.nat (times.times p (div.div n p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times p (div.div m p))) (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_l.rewrite_l nat.nat (times.times p (minus.minus (div.div n p) (div.div m p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (times.times (minus.minus (div.div n p) (div.div m p)) p)) (rewrite_r.rewrite_r nat.nat (times.times p (minus.minus (div.div n p) (div.div m p))) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times p (minus.minus (div.div n p) (div.div m p))) __) (refl.refl nat.nat (times.times p (minus.minus (div.div n p) (div.div m p)))) (times.times (minus.minus (div.div n p) (div.div m p)) p) (commutative_times.commutative_times (minus.minus (div.div n p) (div.div m p)) p)) (minus.minus (times.times p (div.div n p)) (times.times p (div.div m p))) (distributive_times_minus.distributive_times_minus p (div.div n p) (div.div m p))) (minus.minus n (mod.mod n p)) (rewrite_l.rewrite_l nat.nat (times.times (div.div n p) p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus n (mod.mod n p))) (eq_times_div_minus_mod.eq_times_div_minus_mod n p) (times.times p (div.div n p)) (commutative_times.commutative_times (div.div n p) p))) (minus.minus n (plus.plus (mod.mod n p) (times.times p (div.div m p)))) (minus_plus.minus_plus n (mod.mod n p) (times.times p (div.div m p)))) (plus.plus (times.times p (div.div m p)) (mod.mod n p)) (commutative_plus.commutative_plus (times.times p (div.div m p)) (mod.mod n p))) (mod.mod m p) Hcong) (times.times (div.div m p) p) (commutative_times.commutative_times (div.div m p) p)) (plus.plus (mod.mod n p) (times.times p (div.div n p))) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times p (div.div n p)) (mod.mod n p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n __) (rewrite_l.rewrite_l nat.nat (times.times (div.div n p) p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n (plus.plus __ (mod.mod n p))) (div_mod.div_mod n p) (times.times p (div.div n p)) (commutative_times.commutative_times (div.div n p) p)) (plus.plus (mod.mod n p) (times.times p (div.div n p))) (commutative_plus.commutative_plus (times.times p (div.div n p)) (mod.mod n p)))) (plus.plus (times.times p (div.div n p)) (mod.mod n p)) (commutative_plus.commutative_plus (times.times p (div.div n p)) (mod.mod n p))) (times.times (div.div n p) p) (commutative_times.commutative_times (div.div n p) p)) m (div_mod.div_mod m p)) n (div_mod.div_mod n p)) (times.times p (minus.minus (div.div n p) (div.div m p))) (commutative_times.commutative_times p (minus.minus (div.div n p) (div.div m p)))).

