def congruent_times :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O p) (sttfa.impl (congruent.congruent n n1 p) (sttfa.impl (congruent.congruent m m1 p) (congruent.congruent (times.times n m) (times.times n1 m1) p)))))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => n1:(sttfa.etap (sttfa.p nat.nat)) => m1:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => posp:(sttfa.eps (lt.lt O.O p)) => Hcongn:(sttfa.eps (congruent.congruent n n1 p)) => Hcongm:(sttfa.eps (congruent.congruent m m1 p)) => eq_ind_r.eq_ind_r nat.nat (mod.mod (times.times (mod.mod n p) (mod.mod m p)) p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x (mod.mod (times.times n1 m1) p)) (eq_ind_r.eq_ind_r nat.nat (mod.mod n1 p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (mod.mod (times.times x (mod.mod m p)) p) (mod.mod (times.times n1 m1) p)) (eq_ind_r.eq_ind_r nat.nat (mod.mod m1 p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (mod.mod (times.times (mod.mod n1 p) x) p) (mod.mod (times.times n1 m1) p)) (sym_eq.sym_eq nat.nat (mod.mod (times.times n1 m1) p) (mod.mod (times.times (mod.mod n1 p) (mod.mod m1 p)) p) (mod_times.mod_times n1 m1 p posp)) (mod.mod m p) Hcongm) (mod.mod n p) Hcongn) (mod.mod (times.times n m) p) (mod_times.mod_times n m p posp).

