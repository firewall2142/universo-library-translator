def le_mod_aux_m_m :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n p) (le.le (mod_aux.mod_aux p n m) m)))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => nat_ind.nat_ind (_x_365:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n _x_365) (le.le (mod_aux.mod_aux _x_365 n m) m)))) (n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_mod_aux.sym_eq_mod_aux O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le n O.O) (le.le (y n m) m)) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) mod_aux_body.mod_aux_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le n O.O) (le.le (y n m) m)) (sym_eq_mod_aux_body_O.sym_eq_mod_aux_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (le.le n O.O) (le.le (y n m) m)) (lenO:(sttfa.eps (le.le n O.O)) => le_n_O_elim.le_n_O_elim n lenO (__:(sttfa.etap (sttfa.p nat.nat)) => le.le __ m) (le_O_n.le_O_n m))))) (q:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_mod_aux.sym_eq_mod_aux (S.S q) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n q) (le.le (mod_aux.mod_aux q n m) m)))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n (S.S q)) (le.le (y n m) m))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) mod_aux_body.mod_aux_body q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n q) (le.le (mod_aux.mod_aux q n m) m)))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n (S.S q)) (le.le (y n m) m))))) (sym_eq_mod_aux_body_S.sym_eq_mod_aux_body_S q (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)))) => sttfa.impl (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n q) (le.le (mod_aux.mod_aux q n m) m)))) (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n (S.S q)) (le.le (y n m) m))))) (Hind:(sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n q) (le.le (mod_aux.mod_aux q n m) m))))) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => len:(sttfa.eps (le.le n (S.S q))) => leb_elim.leb_elim n m (__:(sttfa.etap (sttfa.p bool.bool)) => le.le (match_bool_type.match_bool_type nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) __) m) (sym_eq_match_bool_type_true.sym_eq_match_bool_type_true nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le n m) (le.le y m)) (auto:(sttfa.eps (le.le n m)) => auto)) (sym_eq_match_bool_type_false.sym_eq_match_bool_type_false nat.nat n (mod_aux.mod_aux q (minus.minus n (S.S m)) m) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (Not.Not (le.le n m)) (le.le y m)) (notlenm:(sttfa.eps (Not.Not (le.le n m))) => Hind (minus.minus n (S.S m)) m (le_plus_to_minus.le_plus_to_minus n (S.S m) q (transitive_le.transitive_le n (S.S q) (plus.plus q (S.S m)) len (eq_coerc.eq_coerc (le.le (S.S q) (plus.plus (S.S q) m)) (le.le (S.S q) (plus.plus q (S.S m))) (le_plus_n_r.le_plus_n_r m (S.S q)) (rewrite_l.rewrite_l nat.nat (plus.plus m (S.S q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S q) __) (le.le (S.S q) (plus.plus q (S.S m)))) (rewrite_r.rewrite_r nat.nat (plus.plus q (S.S m)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S q) __) (le.le (S.S q) (plus.plus q (S.S m)))) (refl.refl sttfa.bool (le.le (S.S q) (plus.plus q (S.S m)))) (plus.plus m (S.S q)) (rewrite_l.rewrite_l nat.nat (S.S (plus.plus m q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (plus.plus q (S.S m))) (rewrite_l.rewrite_l nat.nat (plus.plus q m) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (S.S __) (plus.plus q (S.S m))) (plus_n_Sm.plus_n_Sm q m) (plus.plus m q) (commutative_plus.commutative_plus q m)) (plus.plus m (S.S q)) (plus_n_Sm.plus_n_Sm m q))) (plus.plus (S.S q) m) (commutative_plus.commutative_plus m (S.S q)))))))))))) p.

