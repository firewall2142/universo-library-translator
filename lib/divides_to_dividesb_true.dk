def divides_to_dividesb_true :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (divides.divides n m) (eq.eq bool.bool (dividesb.dividesb n m) true.true)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => posn:(sttfa.eps (lt.lt O.O n)) => divnm:(sttfa.eps (divides.divides n m)) => match_Or_prop.match_Or_prop (eq.eq bool.bool (dividesb.dividesb n m) true.true) (eq.eq bool.bool (dividesb.dividesb n m) false.false) (eq.eq bool.bool (dividesb.dividesb n m) true.true) (auto:(sttfa.eps (eq.eq bool.bool (dividesb.dividesb n m) true.true)) => rewrite_r.rewrite_r bool.bool true.true (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq bool.bool __ true.true) (refl.refl bool.bool true.true) (dividesb.dividesb n m) auto) (ndivbnm:(sttfa.eps (eq.eq bool.bool (dividesb.dividesb n m) false.false)) => falsity.falsity (eq.eq bool.bool (dividesb.dividesb n m) true.true) (absurd.absurd (divides.divides n m) divnm (dividesb_false_to_not_divides.dividesb_false_to_not_divides n m (rewrite_r.rewrite_r bool.bool false.false (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq bool.bool __ false.false) (refl.refl bool.bool false.false) (dividesb.dividesb n m) ndivbnm)))) (true_or_false.true_or_false (dividesb.dividesb n m)).

