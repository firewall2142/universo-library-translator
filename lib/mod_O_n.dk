def mod_O_n :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (mod.mod O.O n) O.O))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => sym_eq.sym_eq nat.nat O.O (mod.mod O.O n) (eq_coerc.eq_coerc (eq.eq nat.nat O.O (mod.mod O.O n)) (eq.eq nat.nat O.O (mod.mod O.O n)) (le_n_O_to_eq.le_n_O_to_eq (mod.mod O.O n) (eq_coerc.eq_coerc (le.le (minus.minus (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))) (plus.plus O.O (times.times n (div.div O.O n)))) (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))) (le.le (mod.mod O.O n) O.O) (minus_le.minus_le (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))) (plus.plus O.O (times.times n (div.div O.O n)))) (rewrite_r.rewrite_r nat.nat (minus.minus (mod.mod O.O n) O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))) (le.le (mod.mod O.O n) O.O)) (rewrite_l.rewrite_l nat.nat (mod.mod O.O n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n)))) (le.le (mod.mod O.O n) O.O)) (rewrite_l.rewrite_l nat.nat O.O (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (mod.mod O.O n) __) (le.le (mod.mod O.O n) O.O)) (refl.refl sttfa.bool (le.le (mod.mod O.O n) O.O)) (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times n (div.div O.O n)) (mod.mod O.O n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat O.O __) (rewrite_l.rewrite_l nat.nat (times.times (div.div O.O n) n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat O.O (plus.plus __ (mod.mod O.O n))) (div_mod.div_mod O.O n) (times.times n (div.div O.O n)) (commutative_times.commutative_times (div.div O.O n) n)) (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))) (commutative_plus.commutative_plus (times.times n (div.div O.O n)) (mod.mod O.O n)))) (minus.minus (mod.mod O.O n) O.O) (minus_n_O.minus_n_O (mod.mod O.O n))) (minus.minus (plus.plus (mod.mod O.O n) (times.times n (div.div O.O n))) (plus.plus O.O (times.times n (div.div O.O n)))) (minus_plus_plus_l.minus_plus_plus_l (mod.mod O.O n) O.O (times.times n (div.div O.O n)))))) (refl.refl sttfa.bool (eq.eq nat.nat O.O (mod.mod O.O n)))).

