def minus_plus :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (minus.minus n m) p) (minus.minus n (plus.plus m p))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => match_Or_prop.match_Or_prop (le.le (plus.plus m p) n) (Not.Not (le.le (plus.plus m p) n)) (eq.eq nat.nat (minus.minus (minus.minus n m) p) (minus.minus n (plus.plus m p))) (Hlt:(sttfa.eps (le.le (plus.plus m p) n)) => plus_to_minus.plus_to_minus (minus.minus n m) p (minus.minus n (plus.plus m p)) (plus_to_minus.plus_to_minus n m (plus.plus p (minus.minus n (plus.plus m p))) (eq_ind.eq_ind nat.nat (plus.plus (plus.plus m p) (minus.minus n (plus.plus m p))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat n x_1) (minus_to_plus.minus_to_plus n (plus.plus m p) (minus.minus n (plus.plus m p)) Hlt (refl.refl nat.nat (minus.minus n (plus.plus m p)))) (plus.plus m (plus.plus p (minus.minus n (plus.plus m p)))) (associative_plus.associative_plus m p (minus.minus n (plus.plus m p)))))) (Hlt:(sttfa.eps (Not.Not (le.le (plus.plus m p) n))) => eq_ind_r.eq_ind_r nat.nat O.O (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x (minus.minus n (plus.plus m p))) (sym_eq.sym_eq nat.nat (minus.minus n (plus.plus m p)) O.O (eq_coerc.eq_coerc (eq.eq nat.nat (minus.minus n (plus.plus m p)) O.O) (eq.eq nat.nat (minus.minus n (plus.plus m p)) O.O) (eq_minus_O.eq_minus_O n (plus.plus m p) (transitive_le.transitive_le n (S.S n) (plus.plus m p) (le_n_Sn.le_n_Sn n) (not_le_to_lt.not_le_to_lt (plus.plus m p) n Hlt))) (refl.refl sttfa.bool (eq.eq nat.nat (minus.minus n (plus.plus m p)) O.O)))) (minus.minus (minus.minus n m) p) (eq_minus_O.eq_minus_O (minus.minus n m) p (eq_coerc.eq_coerc (le.le (minus.minus n m) (minus.minus (plus.plus p m) m)) (le.le (minus.minus n m) p) (monotonic_le_minus_l.monotonic_le_minus_l (plus.plus p m) n m (eq_coerc.eq_coerc (le.le n (plus.plus m p)) (le.le n (plus.plus p m)) (transitive_le.transitive_le n (S.S n) (plus.plus m p) (le_n_Sn.le_n_Sn n) (not_le_to_lt.not_le_to_lt (plus.plus m p) n Hlt)) (rewrite_r.rewrite_r nat.nat (plus.plus m p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le n (plus.plus m p)) (le.le n __)) (refl.refl sttfa.bool (le.le n (plus.plus m p))) (plus.plus p m) (commutative_plus.commutative_plus p m)))) (rewrite_l.rewrite_l nat.nat p (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (minus.minus n m) __) (le.le (minus.minus n m) p)) (refl.refl sttfa.bool (le.le (minus.minus n m) p)) (minus.minus (plus.plus p m) m) (minus_plus_m_m.minus_plus_m_m p m))))) (decidable_le.decidable_le (plus.plus m p) n).

