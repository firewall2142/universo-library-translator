def leb_elim :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m)))))))
  :=
  nat_elim2.nat_elim2 (__:(sttfa.etap (sttfa.p nat.nat)) => _0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le __ _0) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le __ _0)) (P false.false)) (P (leb.leb __ _0))))) (n:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_leb.sym_eq_leb O.O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le O.O n) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le O.O n)) (P false.false)) (P (y n))))) (sym_eq_filter_nat_type_O.sym_eq_filter_nat_type_O (sttfa.arrow nat.nat bool.bool) leb_body.leb_body (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le O.O n) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le O.O n)) (P false.false)) (P (y n))))) (sym_eq_leb_body_O.sym_eq_leb_body_O (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le O.O n) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le O.O n)) (P false.false)) (P (y n))))) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto:(sttfa.eps (sttfa.impl (le.le O.O n) (P true.true))) => auto':(sttfa.eps (sttfa.impl (Not.Not (le.le O.O n)) (P false.false))) => auto (le_O_n.le_O_n n))))) (n:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_leb.sym_eq_leb (S.S n) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat bool.bool) leb_body.leb_body n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_leb_body_S.sym_eq_leb_body_S n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) O.O)) (P false.false)) (P (y O.O))))) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O bool.bool false.false (q:(sttfa.etap (sttfa.p nat.nat)) => leb.leb n q) (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) O.O) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) O.O)) (P false.false)) (P y)))) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => auto:(sttfa.eps (sttfa.impl (le.le (S.S n) O.O) (P true.true))) => auto':(sttfa.eps (sttfa.impl (Not.Not (le.le (S.S n) O.O)) (P false.false))) => auto' (not_le_Sn_O.not_le_Sn_O n)))))) (n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => sym_eq_leb.sym_eq_leb (S.S n) (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_filter_nat_type_S.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat bool.bool) leb_body.leb_body n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_leb_body_S.sym_eq_leb_body_S n (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat bool.bool))) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) (S.S m))) (P false.false)) (P (y (S.S m))))))) (sym_eq_match_nat_type_S.sym_eq_match_nat_type_S bool.bool false.false (q:(sttfa.etap (sttfa.p nat.nat)) => leb.leb n q) m (y:(sttfa.etap (sttfa.p bool.bool)) => sttfa.impl (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m))))) (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le (S.S n) (S.S m)) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le (S.S n) (S.S m))) (P false.false)) (P y))))) (Hind:(sttfa.eps (sttfa.forall (sttfa.arrow bool.bool sttfa.bool) (P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => sttfa.impl (sttfa.impl (le.le n m) (P true.true)) (sttfa.impl (sttfa.impl (Not.Not (le.le n m)) (P false.false)) (P (leb.leb n m)))))) => P:(sttfa.etap (sttfa.p (sttfa.arrow bool.bool sttfa.bool))) => Pt:(sttfa.eps (sttfa.impl (le.le (S.S n) (S.S m)) (P true.true))) => Pf:(sttfa.eps (sttfa.impl (Not.Not (le.le (S.S n) (S.S m))) (P false.false))) => Hind P (lenm:(sttfa.eps (le.le n m)) => Pt (le_S_S.le_S_S n m lenm)) (nlenm:(sttfa.eps (Not.Not (le.le n m))) => Pf (not_le_to_not_le_S_S.not_le_to_not_le_S_S n m nlenm))))))).

