def minus_to_plus :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le m n) (sttfa.impl (eq.eq nat.nat (minus.minus n m) p) (eq.eq nat.nat n (plus.plus m p)))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => p:(sttfa.etap (sttfa.p nat.nat)) => lemn:(sttfa.eps (le.le m n)) => eqp:(sttfa.eps (eq.eq nat.nat (minus.minus n m) p)) => eq_coerc.eq_coerc (eq.eq nat.nat n (plus.plus (minus.minus n m) m)) (eq.eq nat.nat n (plus.plus m p)) (plus_minus_m_m.plus_minus_m_m n m lemn) (rewrite_r.rewrite_r nat.nat (plus.plus m (minus.minus n m)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n __) (eq.eq nat.nat n (plus.plus m p))) (rewrite_r.rewrite_r nat.nat p (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (eq.eq nat.nat n (plus.plus m __)) (eq.eq nat.nat n (plus.plus m p))) (refl.refl sttfa.bool (eq.eq nat.nat n (plus.plus m p))) (minus.minus n m) eqp) (plus.plus (minus.minus n m) m) (commutative_plus.commutative_plus (minus.minus n m) m)).

