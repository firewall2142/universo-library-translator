def not_divides_to_dividesb_false :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq bool.bool (dividesb.dividesb n m) false.false)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => posn:(sttfa.eps (lt.lt O.O n)) => match_Or_prop.match_Or_prop (eq.eq bool.bool (dividesb.dividesb n m) true.true) (eq.eq bool.bool (dividesb.dividesb n m) false.false) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq bool.bool (dividesb.dividesb n m) false.false)) (divbnm:(sttfa.eps (eq.eq bool.bool (dividesb.dividesb n m) true.true)) => ndivnm:(sttfa.eps (Not.Not (divides.divides n m))) => falsity.falsity (eq.eq bool.bool (dividesb.dividesb n m) false.false) (absurd.absurd (divides.divides n m) (dividesb_true_to_divides.dividesb_true_to_divides n m (rewrite_r.rewrite_r bool.bool true.true (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq bool.bool __ true.true) (refl.refl bool.bool true.true) (dividesb.dividesb n m) divbnm)) ndivnm)) (auto:(sttfa.eps (eq.eq bool.bool (dividesb.dividesb n m) false.false)) => auto':(sttfa.eps (Not.Not (divides.divides n m))) => rewrite_r.rewrite_r bool.bool false.false (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq bool.bool __ false.false) (refl.refl bool.bool false.false) (dividesb.dividesb n m) auto) (true_or_false.true_or_false (dividesb.dividesb n m)).

