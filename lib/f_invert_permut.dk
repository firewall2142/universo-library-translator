def f_invert_permut :
  sttfa.eps (sttfa.forall (sttfa.arrow nat.nat nat.nat) (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le m n) (sttfa.impl (permut.permut f n) (eq.eq nat.nat (f (invert_permut.invert_permut n f m)) m))))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => lemn:(sttfa.eps (le.le m n)) => permf:(sttfa.eps (permut.permut f n)) => match_And_prop.match_And_prop (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (le.le (invert_permut.invert_permut n f i) n))) (injn.injn (invert_permut.invert_permut n f) n) (eq.eq nat.nat (f (invert_permut.invert_permut n f m)) m) (Hle:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (le.le (invert_permut.invert_permut n f i) n)))) => Hinj:(sttfa.eps (injn.injn (invert_permut.invert_permut n f) n)) => match_And_prop.match_And_prop (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (le.le (f i) n))) (injn.injn f n) (eq.eq nat.nat (f (invert_permut.invert_permut n f m)) m) (lef:(sttfa.eps (sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (le.le (f i) n)))) => injf:(sttfa.eps (injn.injn f n)) => injective_invert_permut.injective_invert_permut f n permf (f (invert_permut.invert_permut n f m)) m (lef (invert_permut.invert_permut n f m) (Hle m lemn)) lemn (invert_permut_f.invert_permut_f f n (invert_permut.invert_permut n f m) (Hle m lemn) injf)) permf) (permut_invert_permut.permut_invert_permut f n permf).

