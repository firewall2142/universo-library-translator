def div_mod_spec_to_eq :
  sttfa.eps (sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (q:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (r:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (q1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (r1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (div_mod_spec.div_mod_spec a b q r) (sttfa.impl (div_mod_spec.div_mod_spec a b q1 r1) (eq.eq nat.nat q q1)))))))))
  :=
  a:(sttfa.etap (sttfa.p nat.nat)) => b:(sttfa.etap (sttfa.p nat.nat)) => q:(sttfa.etap (sttfa.p nat.nat)) => r:(sttfa.etap (sttfa.p nat.nat)) => q1:(sttfa.etap (sttfa.p nat.nat)) => r1:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (div_mod_spec.div_mod_spec a b q r)) => match_div_mod_spec_prop.match_div_mod_spec_prop a b q r (sttfa.impl (div_mod_spec.div_mod_spec a b q1 r1) (eq.eq nat.nat q q1)) (ltrb:(sttfa.eps (lt.lt r b)) => spec:(sttfa.eps (eq.eq nat.nat a (plus.plus (times.times q b) r))) => _clearme0:(sttfa.eps (div_mod_spec.div_mod_spec a b q1 r1)) => match_div_mod_spec_prop.match_div_mod_spec_prop a b q1 r1 (eq.eq nat.nat q q1) (ltr1b:(sttfa.eps (lt.lt r1 b)) => spec1:(sttfa.eps (eq.eq nat.nat a (plus.plus (times.times q1 b) r1))) => leb_elim.leb_elim q q1 (__:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat q q1) (leqq1:(sttfa.eps (le.le q q1)) => match_Or_prop.match_Or_prop (lt.lt q q1) (eq.eq nat.nat q q1) (eq.eq nat.nat q q1) (ltqq1:(sttfa.eps (lt.lt q q1)) => falsity.falsity (eq.eq nat.nat q q1) (absurd.absurd (le.le (S.S a) a) (lt_to_le_to_lt.lt_to_le_to_lt a (times.times (S.S q) b) a (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times q b) r) (x:(sttfa.etap (sttfa.p nat.nat)) => lt.lt x (times.times (S.S q) b)) (eq_coerc.eq_coerc (lt.lt (plus.plus (times.times q b) r) (plus.plus (times.times q b) b)) (lt.lt (plus.plus (times.times q b) r) (times.times (S.S q) b)) (monotonic_lt_plus_r.monotonic_lt_plus_r (times.times q b) r b ltrb) (rewrite_r.rewrite_r nat.nat (times.times b q) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus __ r) (plus.plus __ b)) (lt.lt (plus.plus __ r) (times.times (S.S q) b))) (rewrite_r.rewrite_r nat.nat (plus.plus r (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q) r) (plus.plus (times.times b q) b)) (lt.lt __ (times.times (S.S q) b))) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q) r) (plus.plus (times.times b q) b)) (lt.lt __ (times.times (S.S q) b))) (rewrite_r.rewrite_r nat.nat (times.times b (S.S q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q) r) (plus.plus (times.times b q) b)) (lt.lt a __)) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q) r) (plus.plus (times.times b q) b)) (lt.lt a __)) (rewrite_r.rewrite_r nat.nat (plus.plus r (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt __ (plus.plus (times.times b q) b)) (lt.lt a (plus.plus b (times.times b q)))) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt __ (plus.plus (times.times b q) b)) (lt.lt a (plus.plus b (times.times b q)))) (rewrite_r.rewrite_r nat.nat (plus.plus b (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt a __) (lt.lt a (plus.plus b (times.times b q)))) (refl.refl sttfa.bool (lt.lt a (plus.plus b (times.times b q)))) (plus.plus (times.times b q) b) (commutative_plus.commutative_plus (times.times b q) b)) (plus.plus r (times.times b q)) (let_clause_1078.let_clause_1078 a b q r q1 r1 _clearme ltrb spec _clearme0 ltr1b spec1 leqq1 ltqq1)) (plus.plus (times.times b q) r) (commutative_plus.commutative_plus (times.times b q) r)) (times.times b (S.S q)) (times_n_Sm.times_n_Sm b q)) (times.times (S.S q) b) (commutative_times.commutative_times (S.S q) b)) (plus.plus r (times.times b q)) (let_clause_1078.let_clause_1078 a b q r q1 r1 _clearme ltrb spec _clearme0 ltr1b spec1 leqq1 ltqq1)) (plus.plus (times.times b q) r) (commutative_plus.commutative_plus (times.times b q) r)) (times.times q b) (commutative_times.commutative_times q b))) a spec) (transitive_le.transitive_le (times.times (S.S q) b) (times.times q1 b) a (eq_coerc.eq_coerc (le.le (times.times b (S.S q)) (times.times b q1)) (le.le (times.times (S.S q) b) (times.times q1 b)) (monotonic_le_times_r.monotonic_le_times_r b (S.S q) q1 ltqq1) (rewrite_r.rewrite_r nat.nat (times.times b (S.S q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q)) (times.times b q1)) (le.le __ (times.times q1 b))) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q)) (times.times b q1)) (le.le __ (times.times q1 b))) (rewrite_r.rewrite_r nat.nat (times.times b q1) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q)) (times.times b q1)) (le.le (plus.plus b (times.times b q)) __)) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (times.times b q1)) (le.le (plus.plus b (times.times b q)) (times.times b q1))) (refl.refl sttfa.bool (le.le (plus.plus b (times.times b q)) (times.times b q1))) (times.times b (S.S q)) (times_n_Sm.times_n_Sm b q)) (times.times q1 b) (commutative_times.commutative_times q1 b)) (times.times b (S.S q)) (times_n_Sm.times_n_Sm b q)) (times.times (S.S q) b) (commutative_times.commutative_times (S.S q) b))) (eq_coerc.eq_coerc (le.le (times.times q1 b) (plus.plus (times.times q1 b) r1)) (le.le (times.times q1 b) a) (le_plus_n_r.le_plus_n_r r1 (times.times q1 b)) (rewrite_r.rewrite_r nat.nat (times.times b q1) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (plus.plus __ r1)) (le.le __ a)) (rewrite_r.rewrite_r nat.nat (plus.plus r1 (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b q1) __) (le.le (times.times b q1) a)) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b q1) __) (le.le (times.times b q1) a)) (refl.refl sttfa.bool (le.le (times.times b q1) a)) (plus.plus r1 (times.times b q1)) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times b q1) r1) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat a __) (rewrite_l.rewrite_l nat.nat (times.times q1 b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat a (plus.plus __ r1)) spec1 (times.times b q1) (commutative_times.commutative_times q1 b)) (plus.plus r1 (times.times b q1)) (commutative_plus.commutative_plus (times.times b q1) r1))) (plus.plus (times.times b q1) r1) (commutative_plus.commutative_plus (times.times b q1) r1)) (times.times q1 b) (commutative_times.commutative_times q1 b))))) (not_le_Sn_n.not_le_Sn_n a))) (_x_172:(sttfa.eps (eq.eq nat.nat q q1)) => rewrite_l.rewrite_l nat.nat q (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat q __) (refl.refl nat.nat q) q1 _x_172) (le_to_or_lt_eq.le_to_or_lt_eq q q1 leqq1)) (leqq1:(sttfa.eps (Not.Not (le.le q q1))) => falsity.falsity (eq.eq nat.nat q q1) (absurd.absurd (le.le (S.S a) a) (lt_to_le_to_lt.lt_to_le_to_lt a (times.times (S.S q1) b) a (eq_ind_r.eq_ind_r nat.nat (plus.plus (times.times q1 b) r1) (x:(sttfa.etap (sttfa.p nat.nat)) => lt.lt x (times.times (S.S q1) b)) (eq_coerc.eq_coerc (lt.lt (plus.plus (times.times q1 b) r1) (plus.plus (times.times q1 b) b)) (lt.lt (plus.plus (times.times q1 b) r1) (times.times (S.S q1) b)) (monotonic_lt_plus_r.monotonic_lt_plus_r (times.times q1 b) r1 b ltr1b) (rewrite_r.rewrite_r nat.nat (times.times b q1) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus __ r1) (plus.plus __ b)) (lt.lt (plus.plus __ r1) (times.times (S.S q1) b))) (rewrite_r.rewrite_r nat.nat (plus.plus r1 (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q1) r1) (plus.plus (times.times b q1) b)) (lt.lt __ (times.times (S.S q1) b))) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q1) r1) (plus.plus (times.times b q1) b)) (lt.lt __ (times.times (S.S q1) b))) (rewrite_r.rewrite_r nat.nat (times.times b (S.S q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q1) r1) (plus.plus (times.times b q1) b)) (lt.lt a __)) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt (plus.plus (times.times b q1) r1) (plus.plus (times.times b q1) b)) (lt.lt a __)) (rewrite_r.rewrite_r nat.nat (plus.plus r1 (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt __ (plus.plus (times.times b q1) b)) (lt.lt a (plus.plus b (times.times b q1)))) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt __ (plus.plus (times.times b q1) b)) (lt.lt a (plus.plus b (times.times b q1)))) (rewrite_r.rewrite_r nat.nat (plus.plus b (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (lt.lt a __) (lt.lt a (plus.plus b (times.times b q1)))) (refl.refl sttfa.bool (lt.lt a (plus.plus b (times.times b q1)))) (plus.plus (times.times b q1) b) (commutative_plus.commutative_plus (times.times b q1) b)) (plus.plus r1 (times.times b q1)) (let_clause_1062.let_clause_1062 a b q r q1 r1 _clearme ltrb spec _clearme0 ltr1b spec1 leqq1)) (plus.plus (times.times b q1) r1) (commutative_plus.commutative_plus (times.times b q1) r1)) (times.times b (S.S q1)) (times_n_Sm.times_n_Sm b q1)) (times.times (S.S q1) b) (commutative_times.commutative_times (S.S q1) b)) (plus.plus r1 (times.times b q1)) (let_clause_1062.let_clause_1062 a b q r q1 r1 _clearme ltrb spec _clearme0 ltr1b spec1 leqq1)) (plus.plus (times.times b q1) r1) (commutative_plus.commutative_plus (times.times b q1) r1)) (times.times q1 b) (commutative_times.commutative_times q1 b))) a spec1) (transitive_le.transitive_le (times.times (S.S q1) b) (times.times q b) a (eq_coerc.eq_coerc (le.le (times.times b (S.S q1)) (times.times b q)) (le.le (times.times (S.S q1) b) (times.times q b)) (monotonic_le_times_r.monotonic_le_times_r b (S.S q1) q (not_le_to_lt.not_le_to_lt q q1 leqq1)) (rewrite_r.rewrite_r nat.nat (times.times b (S.S q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q1)) (times.times b q)) (le.le __ (times.times q b))) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q1)) (times.times b q)) (le.le __ (times.times q b))) (rewrite_r.rewrite_r nat.nat (times.times b q) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b (S.S q1)) (times.times b q)) (le.le (plus.plus b (times.times b q1)) __)) (rewrite_l.rewrite_l nat.nat (plus.plus b (times.times b q1)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (times.times b q)) (le.le (plus.plus b (times.times b q1)) (times.times b q))) (refl.refl sttfa.bool (le.le (plus.plus b (times.times b q1)) (times.times b q))) (times.times b (S.S q1)) (times_n_Sm.times_n_Sm b q1)) (times.times q b) (commutative_times.commutative_times q b)) (times.times b (S.S q1)) (times_n_Sm.times_n_Sm b q1)) (times.times (S.S q1) b) (commutative_times.commutative_times (S.S q1) b))) (eq_coerc.eq_coerc (le.le (times.times q b) (plus.plus (times.times q b) r)) (le.le (times.times q b) a) (le_plus_n_r.le_plus_n_r r (times.times q b)) (rewrite_r.rewrite_r nat.nat (times.times b q) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le __ (plus.plus __ r)) (le.le __ a)) (rewrite_r.rewrite_r nat.nat (plus.plus r (times.times b q)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b q) __) (le.le (times.times b q) a)) (rewrite_l.rewrite_l nat.nat a (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (times.times b q) __) (le.le (times.times b q) a)) (refl.refl sttfa.bool (le.le (times.times b q) a)) (plus.plus r (times.times b q)) (rewrite_l.rewrite_l nat.nat (plus.plus (times.times b q) r) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat a __) (rewrite_l.rewrite_l nat.nat (times.times q b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat a (plus.plus __ r)) spec (times.times b q) (commutative_times.commutative_times q b)) (plus.plus r (times.times b q)) (commutative_plus.commutative_plus (times.times b q) r))) (plus.plus (times.times b q) r) (commutative_plus.commutative_plus (times.times b q) r)) (times.times q b) (commutative_times.commutative_times q b))))) (not_le_Sn_n.not_le_Sn_n a)))) _clearme0) _clearme.

