def divides_to_le :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O m) (sttfa.impl (divides.divides n m) (le.le n m)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => posm:(sttfa.eps (lt.lt O.O m)) => _clearme:(sttfa.eps (divides.divides n m)) => match_divides_prop.match_divides_prop n m (le.le n m) (d:(sttfa.etap (sttfa.p nat.nat)) => match_nat_prop.match_nat_prop (__:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat m (times.times n __)) (le.le n m)) (eqm:(sttfa.eps (eq.eq nat.nat m (times.times n O.O))) => falsity.falsity (le.le n m) (absurd.absurd (le.le (S.S m) O.O) (eq_coerc.eq_coerc (le.le (S.S O.O) m) (le.le (S.S m) O.O) posm (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S __) m) (le.le (S.S m) O.O)) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le (S.S m) m) (le.le (S.S m) __)) (refl.refl sttfa.bool (le.le (S.S m) m)) O.O (let_clause_1531.let_clause_1531 n m posm _clearme d eqm)) O.O (let_clause_1531.let_clause_1531 n m posm _clearme d eqm))) (not_le_Sn_O.not_le_Sn_O m))) (p:(sttfa.etap (sttfa.p nat.nat)) => eqm:(sttfa.eps (eq.eq nat.nat m (times.times n (S.S p)))) => eq_ind_r.eq_ind_r nat.nat (times.times n (S.S p)) (x:(sttfa.etap (sttfa.p nat.nat)) => le.le n x) (eq_coerc.eq_coerc (le.le n (plus.plus n (times.times n p))) (le.le n (times.times n (S.S p))) (le_plus_n_r.le_plus_n_r (times.times n p) n) (rewrite_l.rewrite_l nat.nat (plus.plus n (times.times n p)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le n (plus.plus n (times.times n p))) (le.le n __)) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le n (plus.plus n (times.times n p))) (le.le n __)) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (le.le n __) (le.le n m)) (refl.refl sttfa.bool (le.le n m)) (plus.plus n (times.times n p)) (let_clause_15311.let_clause_15311 n m posm _clearme d p eqm)) (plus.plus n (times.times n p)) (let_clause_15311.let_clause_15311 n m posm _clearme d p eqm)) (times.times n (S.S p)) (times_n_Sm.times_n_Sm n p))) m eqm) d) _clearme.

