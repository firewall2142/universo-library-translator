def dividesb_true_to_divides :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq bool.bool (dividesb.dividesb n m) true.true) (divides.divides n m))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => match_Or_prop.match_Or_prop (lt.lt O.O n) (eq.eq nat.nat O.O n) (sttfa.impl (eq.eq bool.bool (dividesb.dividesb n m) true.true) (divides.divides n m)) (posn:(sttfa.eps (lt.lt O.O n)) => divbnm:(sttfa.eps (eq.eq bool.bool (dividesb.dividesb n m) true.true)) => mod_O_to_divides.mod_O_to_divides n m posn (eqb_true_to_eq.eqb_true_to_eq (mod.mod m n) O.O divbnm)) (eqnO:(sttfa.eps (eq.eq nat.nat O.O n)) => eq_ind.eq_ind nat.nat O.O (x_1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq bool.bool (dividesb.dividesb x_1 m) true.true) (divides.divides x_1 m)) (sym_eq_match_nat_type_O.sym_eq_match_nat_type_O nat.nat m (p:(sttfa.etap (sttfa.p nat.nat)) => mod_aux.mod_aux m m p) (y:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq bool.bool (eqb.eqb y O.O) true.true) (divides.divides O.O m)) (eqbmO:(sttfa.eps (eq.eq bool.bool (eqb.eqb m O.O) true.true)) => eq_ind_r.eq_ind_r nat.nat O.O (x:(sttfa.etap (sttfa.p nat.nat)) => divides.divides O.O x) (divides_n_n.divides_n_n O.O) m (eqb_true_to_eq.eqb_true_to_eq m O.O eqbmO))) n eqnO) (le_to_or_lt_eq.le_to_or_lt_eq O.O n (le_O_n.le_O_n n)).

