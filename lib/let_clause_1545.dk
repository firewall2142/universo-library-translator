def let_clause_1545 :
  sttfa.eps (sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat (gcd.gcd m n) O.O) (sttfa.impl (divides.divides O.O n) (sttfa.forall nat.nat (q1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat n (times.times O.O q1)) (sttfa.impl (divides.divides O.O m) (sttfa.forall nat.nat (q2:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (eq.eq nat.nat m (times.times O.O q2)) (eq.eq nat.nat m O.O))))))))))
  :=
  m:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => H:(sttfa.eps (eq.eq nat.nat (gcd.gcd m n) O.O)) => _clearme:(sttfa.eps (divides.divides O.O n)) => q1:(sttfa.etap (sttfa.p nat.nat)) => H1:(sttfa.eps (eq.eq nat.nat n (times.times O.O q1))) => _clearme0:(sttfa.eps (divides.divides O.O m)) => q2:(sttfa.etap (sttfa.p nat.nat)) => H2:(sttfa.eps (eq.eq nat.nat m (times.times O.O q2))) => rewrite_r.rewrite_r nat.nat (times.times q2 O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m __) (rewrite_l.rewrite_l nat.nat (times.times O.O q2) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m __) H2 (times.times q2 O.O) (commutative_times.commutative_times O.O q2)) O.O (times_n_O.times_n_O q2).

