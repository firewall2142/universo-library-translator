def mod_O_to_divides :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (lt.lt O.O n) (sttfa.impl (eq.eq nat.nat (mod.mod m n) O.O) (divides.divides n m)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => auto:(sttfa.eps (lt.lt O.O n)) => auto':(sttfa.eps (eq.eq nat.nat (mod.mod m n) O.O)) => quotient.quotient n m (div.div m n) (rewrite_l.rewrite_l nat.nat (times.times n (div.div m n)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (times.times n (div.div m n))) (refl.refl nat.nat (times.times n (div.div m n))) m (rewrite_r.rewrite_r nat.nat (minus.minus m O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times n (div.div m n)) __) (rewrite_l.rewrite_l nat.nat (mod.mod m n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (times.times n (div.div m n)) (minus.minus m __)) (rewrite_l.rewrite_l nat.nat (times.times (div.div m n) n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (minus.minus m (mod.mod m n))) (eq_times_div_minus_mod.eq_times_div_minus_mod m n) (times.times n (div.div m n)) (commutative_times.commutative_times (div.div m n) n)) O.O auto') m (minus_n_O.minus_n_O m))).

