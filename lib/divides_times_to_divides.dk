def divides_times_to_divides :
  sttfa.eps (sttfa.forall nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (prime.prime p) (sttfa.impl (divides.divides p (times.times n m)) (Or.Or (divides.divides p n) (divides.divides p m)))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) => n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => primp:(sttfa.eps (prime.prime p)) => _clearme:(sttfa.eps (divides.divides p (times.times n m))) => match_divides_prop.match_divides_prop p (times.times n m) (Or.Or (divides.divides p n) (divides.divides p m)) (c:(sttfa.etap (sttfa.p nat.nat)) => nm:(sttfa.eps (eq.eq nat.nat (times.times n m) (times.times p c))) => match_Or_prop.match_Or_prop (divides.divides p n) (Not.Not (divides.divides p n)) (Or.Or (divides.divides p n) (divides.divides p m)) (auto:(sttfa.eps (divides.divides p n)) => or_introl.or_introl (divides.divides p n) (divides.divides p m) auto) (ndivpn:(sttfa.eps (Not.Not (divides.divides p n))) => or_intror.or_intror (divides.divides p n) (divides.divides p m) (match_ex_prop.match_ex_prop nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O)) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O)))) (divides.divides p m) (a:(sttfa.etap (sttfa.p nat.nat)) => _clearme0:(sttfa.eps (ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O)) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O))))) => match_ex_prop.match_ex_prop nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O)) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O))) (divides.divides p m) (b:(sttfa.etap (sttfa.p nat.nat)) => _clearme1:(sttfa.eps (Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O)) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O)))) => match_Or_prop.match_Or_prop (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O)) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O)) (divides.divides p m) (H:(sttfa.eps (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) (S.S O.O))) => quotient.quotient p m (minus.minus (times.times a c) (times.times b m)) (eq_ind_r.eq_ind_r nat.nat (minus.minus (times.times p (times.times a c)) (times.times p (times.times b m))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m x) (eq_ind.eq_ind nat.nat (times.times (times.times p a) c) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x_1 (times.times p (times.times b m)))) (eq_ind_r.eq_ind_r nat.nat (times.times a p) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times x c) (times.times p (times.times b m)))) (eq_ind_r.eq_ind_r nat.nat (times.times a (times.times p c)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x (times.times p (times.times b m)))) (eq_ind.eq_ind nat.nat (times.times n m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times a x_1) (times.times p (times.times b m)))) (eq_ind.eq_ind nat.nat (times.times (times.times a n) m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x_1 (times.times p (times.times b m)))) (eq_ind.eq_ind nat.nat (times.times (times.times p b) m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times a n) m) x_1)) (eq_ind.eq_ind nat.nat (times.times m (times.times a n)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x_1 (times.times (times.times p b) m))) (eq_ind_r.eq_ind_r nat.nat (times.times m (times.times p b)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times m (times.times a n)) x)) (eq_ind.eq_ind nat.nat (times.times m (minus.minus (times.times a n) (times.times p b))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m x_1) (rewrite_r.rewrite_r nat.nat (times.times n a) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (times.times m (minus.minus __ (times.times p b)))) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m __) (refl.refl nat.nat m) (times.times m (minus.minus (times.times n a) (times.times p b))) (rewrite_r.rewrite_r nat.nat (S.S O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (times.times m __)) (times_n_1.times_n_1 m) (minus.minus (times.times n a) (times.times p b)) (rewrite_l.rewrite_l nat.nat (times.times b p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times n a) __) (S.S O.O)) (rewrite_l.rewrite_l nat.nat (times.times a n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times b p)) (S.S O.O)) H (times.times n a) (commutative_times.commutative_times a n)) (times.times p b) (commutative_times.commutative_times b p)))) (times.times a n) (commutative_times.commutative_times a n)) (minus.minus (times.times m (times.times a n)) (times.times m (times.times p b))) (distributive_times_minus.distributive_times_minus m (times.times a n) (times.times p b))) (times.times (times.times p b) m) (commutative_times.commutative_times (times.times p b) m)) (times.times (times.times a n) m) (commutative_times.commutative_times m (times.times a n))) (times.times p (times.times b m)) (associative_times.associative_times p b m)) (times.times a (times.times n m)) (associative_times.associative_times a n m)) (times.times p c) nm) (times.times (times.times a p) c) (associative_times.associative_times a p c)) (times.times p a) (commutative_times.commutative_times p a)) (times.times p (times.times a c)) (associative_times.associative_times p a c)) (times.times p (minus.minus (times.times a c) (times.times b m))) (distributive_times_minus.distributive_times_minus p (times.times a c) (times.times b m)))) (H:(sttfa.eps (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) (S.S O.O))) => quotient.quotient p m (minus.minus (times.times b m) (times.times a c)) (eq_ind_r.eq_ind_r nat.nat (minus.minus (times.times p (times.times b m)) (times.times p (times.times a c))) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m x) (eq_ind.eq_ind nat.nat (times.times (times.times p b) m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x_1 (times.times p (times.times a c)))) (eq_ind.eq_ind nat.nat (times.times (times.times p a) c) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times p b) m) x_1)) (eq_ind.eq_ind nat.nat (times.times a p) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times p b) m) (times.times x_1 c))) (eq_ind_r.eq_ind_r nat.nat (times.times a (times.times p c)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times p b) m) x)) (eq_ind.eq_ind nat.nat (times.times n m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times p b) m) (times.times a x_1))) (eq_ind.eq_ind nat.nat (times.times (times.times a n) m) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times (times.times p b) m) x_1)) (eq_ind.eq_ind nat.nat (times.times m (times.times p b)) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus x_1 (times.times (times.times a n) m))) (eq_ind_r.eq_ind_r nat.nat (times.times m (times.times a n)) (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (minus.minus (times.times m (times.times p b)) x)) (eq_ind.eq_ind nat.nat (times.times m (minus.minus (times.times p b) (times.times a n))) (x_1:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m x_1) (rewrite_r.rewrite_r nat.nat (times.times n a) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (times.times m (minus.minus (times.times p b) __))) (rewrite_l.rewrite_l nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m __) (refl.refl nat.nat m) (times.times m (minus.minus (times.times p b) (times.times n a))) (rewrite_r.rewrite_r nat.nat (S.S O.O) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat m (times.times m __)) (times_n_1.times_n_1 m) (minus.minus (times.times p b) (times.times n a)) (rewrite_l.rewrite_l nat.nat (times.times a n) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus (times.times p b) __) (S.S O.O)) (rewrite_l.rewrite_l nat.nat (times.times b p) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (minus.minus __ (times.times a n)) (S.S O.O)) H (times.times p b) (commutative_times.commutative_times b p)) (times.times n a) (commutative_times.commutative_times a n)))) (times.times a n) (commutative_times.commutative_times a n)) (minus.minus (times.times m (times.times p b)) (times.times m (times.times a n))) (distributive_times_minus.distributive_times_minus m (times.times p b) (times.times a n))) (times.times (times.times a n) m) (commutative_times.commutative_times (times.times a n) m)) (times.times (times.times p b) m) (commutative_times.commutative_times m (times.times p b))) (times.times a (times.times n m)) (associative_times.associative_times a n m)) (times.times p c) nm) (times.times (times.times a p) c) (associative_times.associative_times a p c)) (times.times p a) (commutative_times.commutative_times a p)) (times.times p (times.times a c)) (associative_times.associative_times p a c)) (times.times p (times.times b m)) (associative_times.associative_times p b m)) (times.times p (minus.minus (times.times b m) (times.times a c))) (distributive_times_minus.distributive_times_minus p (times.times b m) (times.times a c)))) _clearme1) _clearme0) (eq_ind.eq_ind nat.nat (gcd.gcd p n) (x_1:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) x_1) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) x_1)))) (eq_ind_r.eq_ind_r nat.nat (gcd.gcd n p) (x:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => ex.ex nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => Or.Or (eq.eq nat.nat (minus.minus (times.times a n) (times.times b p)) x) (eq.eq nat.nat (minus.minus (times.times b p) (times.times a n)) x)))) (eq_minus_gcd.eq_minus_gcd p n) (gcd.gcd p n) (commutative_gcd.commutative_gcd p n)) (S.S O.O) (prime_to_gcd_1.prime_to_gcd_1 p n primp ndivpn)))) (decidable_divides.decidable_divides p n)) _clearme.

