def assoc_plus1 :
  sttfa.eps (sttfa.forall nat.nat (a:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (b:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (c:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus c (plus.plus b a)) (plus.plus (plus.plus b c) a)))))
  :=
  a:(sttfa.etap (sttfa.p nat.nat)) => b:(sttfa.etap (sttfa.p nat.nat)) => c:(sttfa.etap (sttfa.p nat.nat)) => rewrite_r.rewrite_r nat.nat (plus.plus a b) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus c __) (plus.plus (plus.plus b c) a)) (rewrite_r.rewrite_r nat.nat (plus.plus a (plus.plus b c)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus c (plus.plus a b)) __) (rewrite_r.rewrite_r nat.nat (plus.plus a (plus.plus b c)) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat __ (plus.plus a (plus.plus b c))) (refl.refl nat.nat (plus.plus a (plus.plus b c))) (plus.plus c (plus.plus a b)) (rewrite_l.rewrite_l nat.nat (plus.plus (plus.plus a b) c) (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (plus.plus c (plus.plus a b)) __) (commutative_plus.commutative_plus c (plus.plus a b)) (plus.plus a (plus.plus b c)) (associative_plus.associative_plus a b c))) (plus.plus (plus.plus b c) a) (commutative_plus.commutative_plus (plus.plus b c) a)) (plus.plus b a) (commutative_plus.commutative_plus b a).

