def bijn_transpose :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (i:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (j:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (le.le i n) (sttfa.impl (le.le j n) (bijn.bijn (transpose.transpose i j) n))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => i:(sttfa.etap (sttfa.p nat.nat)) => j:(sttfa.etap (sttfa.p nat.nat)) => lein:(sttfa.eps (le.le i n)) => lejn:(sttfa.eps (le.le j n)) => a:(sttfa.etap (sttfa.p nat.nat)) => lean:(sttfa.eps (le.le a n)) => match_Or_prop.match_Or_prop (eq.eq bool.bool (eqb.eqb a i) true.true) (eq.eq bool.bool (eqb.eqb a i) false.false) (ex.ex nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (transpose.transpose i j p) a))) (Hi:(sttfa.eps (eq.eq bool.bool (eqb.eqb a i) true.true)) => ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le x n) (eq.eq nat.nat (transpose.transpose i j x) a)) j (conj.conj (le.le j n) (eq.eq nat.nat (transpose.transpose i j j) a) lejn (eq_ind_r.eq_ind_r nat.nat i (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x a) (sym_eq.sym_eq nat.nat a i (eqb_true_to_eq.eqb_true_to_eq a i Hi)) (transpose.transpose i j j) (transpose_i_j_j.transpose_i_j_j i j)))) (Hi:(sttfa.eps (eq.eq bool.bool (eqb.eqb a i) false.false)) => match_Or_prop.match_Or_prop (eq.eq bool.bool (eqb.eqb a j) true.true) (eq.eq bool.bool (eqb.eqb a j) false.false) (ex.ex nat.nat (p:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le p n) (eq.eq nat.nat (transpose.transpose i j p) a))) (Hj:(sttfa.eps (eq.eq bool.bool (eqb.eqb a j) true.true)) => ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le x n) (eq.eq nat.nat (transpose.transpose i j x) a)) i (conj.conj (le.le i n) (eq.eq nat.nat (transpose.transpose i j i) a) lein (eq_ind_r.eq_ind_r nat.nat j (x:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat x a) (sym_eq.sym_eq nat.nat a j (eqb_true_to_eq.eqb_true_to_eq a j Hj)) (transpose.transpose i j i) (transpose_i_j_i.transpose_i_j_i i j)))) (Hj:(sttfa.eps (eq.eq bool.bool (eqb.eqb a j) false.false)) => ex_intro.ex_intro nat.nat (x:(sttfa.etap (sttfa.p nat.nat)) => And.And (le.le x n) (eq.eq nat.nat (transpose.transpose i j x) a)) a (conj.conj (le.le a n) (eq.eq nat.nat (transpose.transpose i j a) a) lean (eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat j (match_bool_type.match_bool_type nat.nat i a (eqb.eqb a j)) x) a) (eq_ind_r.eq_ind_r bool.bool false.false (x:(sttfa.etap (sttfa.p bool.bool)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat j (match_bool_type.match_bool_type nat.nat i a x) false.false) a) (eq_match_bool_type_false.eq_match_bool_type_false nat.nat i a (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat j (match_bool_type.match_bool_type nat.nat i a false.false) false.false) y) (eq_match_bool_type_false.eq_match_bool_type_false nat.nat j (match_bool_type.match_bool_type nat.nat i a false.false) (y:(sttfa.etap (sttfa.p nat.nat)) => eq.eq nat.nat (match_bool_type.match_bool_type nat.nat j (match_bool_type.match_bool_type nat.nat i a false.false) false.false) y) (refl.refl nat.nat (match_bool_type.match_bool_type nat.nat j (match_bool_type.match_bool_type nat.nat i a false.false) false.false)))) (eqb.eqb a j) Hj) (eqb.eqb a i) Hi))) (true_or_false.true_or_false (eqb.eqb a j))) (true_or_false.true_or_false (eqb.eqb a i)).

