def prime_to_gcd_1 :
  sttfa.eps (sttfa.forall nat.nat (n:(sttfa.etap (sttfa.p nat.nat)) => sttfa.forall nat.nat (m:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (prime.prime n) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (gcd.gcd n m) (S.S O.O))))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) => m:(sttfa.etap (sttfa.p nat.nat)) => _clearme:(sttfa.eps (prime.prime n)) => match_And_prop.match_And_prop (lt.lt (S.S O.O) n) (sttfa.forall nat.nat (m1:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (divides.divides m1 n) (sttfa.impl (lt.lt (S.S O.O) m1) (eq.eq nat.nat m1 n)))) (sttfa.impl (Not.Not (divides.divides n m)) (eq.eq nat.nat (gcd.gcd n m) (S.S O.O))) (lt1n:(sttfa.eps (lt.lt (S.S O.O) n)) => primen:(sttfa.eps (sttfa.forall nat.nat (m0:(sttfa.etap (sttfa.p nat.nat)) => sttfa.impl (divides.divides m0 n) (sttfa.impl (lt.lt (S.S O.O) m0) (eq.eq nat.nat m0 n))))) => ndivnm:(sttfa.eps (Not.Not (divides.divides n m))) => le_to_le_to_eq.le_to_le_to_eq (gcd.gcd n m) (S.S O.O) (not_lt_to_le.not_lt_to_le (S.S O.O) (gcd.gcd n m) (not_to_not.not_to_not (lt.lt (S.S O.O) (gcd.gcd n m)) (eq.eq nat.nat (gcd.gcd n m) n) (primen (gcd.gcd n m) (divides_gcd_l.divides_gcd_l n m)) (not_to_not.not_to_not (eq.eq nat.nat (gcd.gcd n m) n) (divides.divides n m) (auto:(sttfa.eps (eq.eq nat.nat (gcd.gcd n m) n)) => eq_coerc.eq_coerc (divides.divides (gcd.gcd n m) m) (divides.divides n m) (divides_gcd_r.divides_gcd_r n m) (rewrite_r.rewrite_r nat.nat n (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (divides.divides __ m) (divides.divides n m)) (refl.refl sttfa.bool (divides.divides n m)) (gcd.gcd n m) auto)) ndivnm))) (lt_O_gcd.lt_O_gcd n m (not_eq_to_le_to_lt.not_eq_to_le_to_lt O.O m (not_to_not.not_to_not (eq.eq nat.nat O.O m) (divides.divides n m) (auto:(sttfa.eps (eq.eq nat.nat O.O m)) => eq_coerc.eq_coerc (divides.divides n O.O) (divides.divides n m) (divides_n_O.divides_n_O n) (rewrite_r.rewrite_r nat.nat m (__:(sttfa.etap (sttfa.p nat.nat)) => eq.eq sttfa.bool (divides.divides n __) (divides.divides n m)) (refl.refl sttfa.bool (divides.divides n m)) O.O auto)) ndivnm) (le_O_n.le_O_n m)))) _clearme.

